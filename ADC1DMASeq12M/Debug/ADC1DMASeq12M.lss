
ADC1DMASeq12M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ec  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  000029ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020074  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020074  2**0
                  CONTENTS
  4 .bss          00000608  20000080  00002a70  00020080  2**4
                  ALLOC
  5 .stack        00010000  20000688  00003078  00020080  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002f5a7  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003f40  00000000  00000000  0004f6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d981  00000000  00000000  000535e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d48  00000000  00000000  00060f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001180  00000000  00000000  00061cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037d82  00000000  00000000  00062e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017baf  00000000  00000000  0009abad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00124661  00000000  00000000  000b275c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002840  00000000  00000000  001d6dc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 06 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	99 10 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	69 0e 00 00 75 0e 00 00 81 0e 00 00 8d 0e 00 00     i...u...........
      cc:	99 0e 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	6d 0f 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     m...............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     184:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000080 	.word	0x20000080
     280:	00000000 	.word	0x00000000
     284:	000029ec 	.word	0x000029ec

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000029ec 	.word	0x000029ec
     2c4:	20000084 	.word	0x20000084
     2c8:	000029ec 	.word	0x000029ec
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	0000055d 	.word	0x0000055d
     2e0:	00001441 	.word	0x00001441

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	000029ec 	.word	0x000029ec
     364:	20000074 	.word	0x20000074
     368:	20000688 	.word	0x20000688
     36c:	20000080 	.word	0x20000080
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00001461 	.word	0x00001461
     37c:	000012c1 	.word	0x000012c1

00000380 <ADC_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     380:	4b33      	ldr	r3, [pc, #204]	; (450 <ADC_1_PORT_init+0xd0>)
     382:	2208      	movs	r2, #8
     384:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     388:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     38c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     390:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     394:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     398:	f893 2143 	ldrb.w	r2, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
     39c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a4:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a8:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ac:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3b0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3b8:	2210      	movs	r2, #16
     3ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3c6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ca:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3da:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3de:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e6:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ea:	2220      	movs	r2, #32
     3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3f8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3fc:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     400:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     404:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     408:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     40c:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     410:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     414:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     418:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     41c:	2240      	movs	r2, #64	; 0x40
     41e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     422:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     426:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     42a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42e:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
	tmp &= ~PORT_PINCFG_PMUXEN;
     432:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     436:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     43a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     43e:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     442:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     446:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     44a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
     44e:	4770      	bx	lr
     450:	41008000 	.word	0x41008000

00000454 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     454:	4a04      	ldr	r2, [pc, #16]	; (468 <ADC_1_CLOCK_init+0x14>)
     456:	6a13      	ldr	r3, [r2, #32]
     458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     45c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     45e:	2240      	movs	r2, #64	; 0x40
     460:	4b02      	ldr	r3, [pc, #8]	; (46c <ADC_1_CLOCK_init+0x18>)
     462:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
     466:	4770      	bx	lr
     468:	40000800 	.word	0x40000800
     46c:	40001c00 	.word	0x40001c00

00000470 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
     470:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
     472:	4b05      	ldr	r3, [pc, #20]	; (488 <ADC_1_init+0x18>)
     474:	4798      	blx	r3
	ADC_1_PORT_init();
     476:	4b05      	ldr	r3, [pc, #20]	; (48c <ADC_1_init+0x1c>)
     478:	4798      	blx	r3
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
     47a:	2200      	movs	r2, #0
     47c:	4904      	ldr	r1, [pc, #16]	; (490 <ADC_1_init+0x20>)
     47e:	4805      	ldr	r0, [pc, #20]	; (494 <ADC_1_init+0x24>)
     480:	4b05      	ldr	r3, [pc, #20]	; (498 <ADC_1_init+0x28>)
     482:	4798      	blx	r3
     484:	bd08      	pop	{r3, pc}
     486:	bf00      	nop
     488:	00000455 	.word	0x00000455
     48c:	00000381 	.word	0x00000381
     490:	43002000 	.word	0x43002000
     494:	20000248 	.word	0x20000248
     498:	000005ad 	.word	0x000005ad

0000049c <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     49c:	b508      	push	{r3, lr}
     49e:	2240      	movs	r2, #64	; 0x40
     4a0:	4b05      	ldr	r3, [pc, #20]	; (4b8 <EVENT_SYSTEM_0_init+0x1c>)
     4a2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     4a6:	4a05      	ldr	r2, [pc, #20]	; (4bc <EVENT_SYSTEM_0_init+0x20>)
     4a8:	6993      	ldr	r3, [r2, #24]
     4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     4ae:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     4b0:	4b03      	ldr	r3, [pc, #12]	; (4c0 <EVENT_SYSTEM_0_init+0x24>)
     4b2:	4798      	blx	r3
     4b4:	bd08      	pop	{r3, pc}
     4b6:	bf00      	nop
     4b8:	40001c00 	.word	0x40001c00
     4bc:	40000800 	.word	0x40000800
     4c0:	00000609 	.word	0x00000609

000004c4 <TARGET_IO_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c4:	4b10      	ldr	r3, [pc, #64]	; (508 <TARGET_IO_PORT_init+0x44>)
     4c6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4da:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4de:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ee:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4f2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4f6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4fa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4fe:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     502:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     506:	4770      	bx	lr
     508:	41008000 	.word	0x41008000

0000050c <TARGET_IO_CLOCK_init>:
     50c:	4b06      	ldr	r3, [pc, #24]	; (528 <TARGET_IO_CLOCK_init+0x1c>)
     50e:	2240      	movs	r2, #64	; 0x40
     510:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     514:	2243      	movs	r2, #67	; 0x43
     516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     51a:	4a04      	ldr	r2, [pc, #16]	; (52c <TARGET_IO_CLOCK_init+0x20>)
     51c:	6993      	ldr	r3, [r2, #24]
     51e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     522:	6193      	str	r3, [r2, #24]
     524:	4770      	bx	lr
     526:	bf00      	nop
     528:	40001c00 	.word	0x40001c00
     52c:	40000800 	.word	0x40000800

00000530 <TARGET_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void TARGET_IO_init(void)
{
     530:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     532:	4b05      	ldr	r3, [pc, #20]	; (548 <TARGET_IO_init+0x18>)
     534:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM2, (void *)NULL);
     536:	2200      	movs	r2, #0
     538:	4904      	ldr	r1, [pc, #16]	; (54c <TARGET_IO_init+0x1c>)
     53a:	4805      	ldr	r0, [pc, #20]	; (550 <TARGET_IO_init+0x20>)
     53c:	4b05      	ldr	r3, [pc, #20]	; (554 <TARGET_IO_init+0x24>)
     53e:	4798      	blx	r3
	TARGET_IO_PORT_init();
     540:	4b05      	ldr	r3, [pc, #20]	; (558 <TARGET_IO_init+0x28>)
     542:	4798      	blx	r3
     544:	bd08      	pop	{r3, pc}
     546:	bf00      	nop
     548:	0000050d 	.word	0x0000050d
     54c:	41012000 	.word	0x41012000
     550:	2000023c 	.word	0x2000023c
     554:	00000899 	.word	0x00000899
     558:	000004c5 	.word	0x000004c5

0000055c <system_init>:
}

void system_init(void)
{
     55c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     55e:	4b0a      	ldr	r3, [pc, #40]	; (588 <system_init+0x2c>)
     560:	4798      	blx	r3
	init_mcu();

	ADC_1_init();
     562:	4b0a      	ldr	r3, [pc, #40]	; (58c <system_init+0x30>)
     564:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     566:	4b0a      	ldr	r3, [pc, #40]	; (590 <system_init+0x34>)
     568:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     56a:	4a0a      	ldr	r2, [pc, #40]	; (594 <system_init+0x38>)
     56c:	6953      	ldr	r3, [r2, #20]
     56e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     572:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     574:	4b08      	ldr	r3, [pc, #32]	; (598 <system_init+0x3c>)
     576:	4798      	blx	r3
     578:	4602      	mov	r2, r0
     57a:	4908      	ldr	r1, [pc, #32]	; (59c <system_init+0x40>)
     57c:	4808      	ldr	r0, [pc, #32]	; (5a0 <system_init+0x44>)
     57e:	4b09      	ldr	r3, [pc, #36]	; (5a4 <system_init+0x48>)
     580:	4798      	blx	r3

	TIMER_0_init();

	TARGET_IO_init();
     582:	4b09      	ldr	r3, [pc, #36]	; (5a8 <system_init+0x4c>)
     584:	4798      	blx	r3
     586:	bd08      	pop	{r3, pc}
     588:	00000bb5 	.word	0x00000bb5
     58c:	00000471 	.word	0x00000471
     590:	0000049d 	.word	0x0000049d
     594:	40000800 	.word	0x40000800
     598:	00001095 	.word	0x00001095
     59c:	40002400 	.word	0x40002400
     5a0:	2000024c 	.word	0x2000024c
     5a4:	0000074d 	.word	0x0000074d
     5a8:	00000531 	.word	0x00000531

000005ac <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     5ac:	b538      	push	{r3, r4, r5, lr}
     5ae:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     5b0:	4605      	mov	r5, r0
     5b2:	b158      	cbz	r0, 5cc <adc_sync_init+0x20>
     5b4:	1c08      	adds	r0, r1, #0
     5b6:	bf18      	it	ne
     5b8:	2001      	movne	r0, #1
     5ba:	2239      	movs	r2, #57	; 0x39
     5bc:	4904      	ldr	r1, [pc, #16]	; (5d0 <adc_sync_init+0x24>)
     5be:	4b05      	ldr	r3, [pc, #20]	; (5d4 <adc_sync_init+0x28>)
     5c0:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     5c2:	4621      	mov	r1, r4
     5c4:	4628      	mov	r0, r5
     5c6:	4b04      	ldr	r3, [pc, #16]	; (5d8 <adc_sync_init+0x2c>)
     5c8:	4798      	blx	r3
}
     5ca:	bd38      	pop	{r3, r4, r5, pc}
     5cc:	2000      	movs	r0, #0
     5ce:	e7f4      	b.n	5ba <adc_sync_init+0xe>
     5d0:	00002588 	.word	0x00002588
     5d4:	0000090d 	.word	0x0000090d
     5d8:	00000b65 	.word	0x00000b65

000005dc <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     5dc:	b538      	push	{r3, r4, r5, lr}
     5de:	460d      	mov	r5, r1
	ASSERT(descr);
     5e0:	4604      	mov	r4, r0
     5e2:	224e      	movs	r2, #78	; 0x4e
     5e4:	4905      	ldr	r1, [pc, #20]	; (5fc <adc_sync_enable_channel+0x20>)
     5e6:	3000      	adds	r0, #0
     5e8:	bf18      	it	ne
     5ea:	2001      	movne	r0, #1
     5ec:	4b04      	ldr	r3, [pc, #16]	; (600 <adc_sync_enable_channel+0x24>)
     5ee:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     5f0:	4629      	mov	r1, r5
     5f2:	4620      	mov	r0, r4
     5f4:	4b03      	ldr	r3, [pc, #12]	; (604 <adc_sync_enable_channel+0x28>)
     5f6:	4798      	blx	r3

	return ERR_NONE;
}
     5f8:	2000      	movs	r0, #0
     5fa:	bd38      	pop	{r3, r4, r5, pc}
     5fc:	00002588 	.word	0x00002588
     600:	0000090d 	.word	0x0000090d
     604:	00000b9d 	.word	0x00000b9d

00000608 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     608:	b508      	push	{r3, lr}
	return _event_system_init();
     60a:	4b01      	ldr	r3, [pc, #4]	; (610 <event_system_init+0x8>)
     60c:	4798      	blx	r3
}
     60e:	bd08      	pop	{r3, pc}
     610:	00000ea5 	.word	0x00000ea5

00000614 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	460d      	mov	r5, r1
     618:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     61a:	4604      	mov	r4, r0
     61c:	b160      	cbz	r0, 638 <io_write+0x24>
     61e:	1c08      	adds	r0, r1, #0
     620:	bf18      	it	ne
     622:	2001      	movne	r0, #1
     624:	2234      	movs	r2, #52	; 0x34
     626:	4905      	ldr	r1, [pc, #20]	; (63c <io_write+0x28>)
     628:	4b05      	ldr	r3, [pc, #20]	; (640 <io_write+0x2c>)
     62a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     62c:	6823      	ldr	r3, [r4, #0]
     62e:	4632      	mov	r2, r6
     630:	4629      	mov	r1, r5
     632:	4620      	mov	r0, r4
     634:	4798      	blx	r3
}
     636:	bd70      	pop	{r4, r5, r6, pc}
     638:	2000      	movs	r0, #0
     63a:	e7f3      	b.n	624 <io_write+0x10>
     63c:	000025a4 	.word	0x000025a4
     640:	0000090d 	.word	0x0000090d

00000644 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     644:	b570      	push	{r4, r5, r6, lr}
     646:	460d      	mov	r5, r1
     648:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     64a:	4604      	mov	r4, r0
     64c:	b160      	cbz	r0, 668 <io_read+0x24>
     64e:	1c08      	adds	r0, r1, #0
     650:	bf18      	it	ne
     652:	2001      	movne	r0, #1
     654:	223d      	movs	r2, #61	; 0x3d
     656:	4905      	ldr	r1, [pc, #20]	; (66c <io_read+0x28>)
     658:	4b05      	ldr	r3, [pc, #20]	; (670 <io_read+0x2c>)
     65a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     65c:	6863      	ldr	r3, [r4, #4]
     65e:	4632      	mov	r2, r6
     660:	4629      	mov	r1, r5
     662:	4620      	mov	r0, r4
     664:	4798      	blx	r3
}
     666:	bd70      	pop	{r4, r5, r6, pc}
     668:	2000      	movs	r0, #0
     66a:	e7f3      	b.n	654 <io_read+0x10>
     66c:	000025a4 	.word	0x000025a4
     670:	0000090d 	.word	0x0000090d

00000674 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     676:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     678:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     67a:	b12f      	cbz	r7, 688 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     67c:	688d      	ldr	r5, [r1, #8]
     67e:	463c      	mov	r4, r7
     680:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     682:	f1c2 0e01 	rsb	lr, r2, #1
     686:	e00b      	b.n	6a0 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     688:	4b0e      	ldr	r3, [pc, #56]	; (6c4 <timer_add_timer_task+0x50>)
     68a:	4798      	blx	r3
		return;
     68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     68e:	4473      	add	r3, lr
     690:	68a0      	ldr	r0, [r4, #8]
     692:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     694:	42ab      	cmp	r3, r5
     696:	d20a      	bcs.n	6ae <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     698:	6823      	ldr	r3, [r4, #0]
     69a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     69c:	b153      	cbz	r3, 6b4 <timer_add_timer_task+0x40>
     69e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     6a0:	6863      	ldr	r3, [r4, #4]
     6a2:	4293      	cmp	r3, r2
     6a4:	d8f3      	bhi.n	68e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     6a6:	68a0      	ldr	r0, [r4, #8]
     6a8:	4403      	add	r3, r0
     6aa:	1a9b      	subs	r3, r3, r2
     6ac:	e7f2      	b.n	694 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     6ae:	42a7      	cmp	r7, r4
     6b0:	d004      	beq.n	6bc <timer_add_timer_task+0x48>
     6b2:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     6b4:	4620      	mov	r0, r4
     6b6:	4b04      	ldr	r3, [pc, #16]	; (6c8 <timer_add_timer_task+0x54>)
     6b8:	4798      	blx	r3
     6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     6bc:	4660      	mov	r0, ip
     6be:	4b01      	ldr	r3, [pc, #4]	; (6c4 <timer_add_timer_task+0x50>)
     6c0:	4798      	blx	r3
     6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6c4:	00000935 	.word	0x00000935
     6c8:	00000961 	.word	0x00000961

000006cc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     6d0:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     6d2:	6907      	ldr	r7, [r0, #16]
     6d4:	3701      	adds	r7, #1
     6d6:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     6d8:	7e03      	ldrb	r3, [r0, #24]
     6da:	f013 0f01 	tst.w	r3, #1
     6de:	d113      	bne.n	708 <timer_process_counted+0x3c>
     6e0:	7e03      	ldrb	r3, [r0, #24]
     6e2:	f013 0f02 	tst.w	r3, #2
     6e6:	d10f      	bne.n	708 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     6e8:	b354      	cbz	r4, 740 <timer_process_counted+0x74>
     6ea:	6863      	ldr	r3, [r4, #4]
     6ec:	1afb      	subs	r3, r7, r3
     6ee:	68a2      	ldr	r2, [r4, #8]
     6f0:	4293      	cmp	r3, r2
     6f2:	d307      	bcc.n	704 <timer_process_counted+0x38>
     6f4:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     6f6:	f100 0814 	add.w	r8, r0, #20
     6fa:	f8df 9048 	ldr.w	r9, [pc, #72]	; 744 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     6fe:	f8df a048 	ldr.w	sl, [pc, #72]	; 748 <timer_process_counted+0x7c>
     702:	e012      	b.n	72a <timer_process_counted+0x5e>
     704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     708:	7e03      	ldrb	r3, [r0, #24]
     70a:	f043 0302 	orr.w	r3, r3, #2
     70e:	7603      	strb	r3, [r0, #24]
		return;
     710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     714:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     716:	68e3      	ldr	r3, [r4, #12]
     718:	4620      	mov	r0, r4
     71a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     71c:	b185      	cbz	r5, 740 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     71e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     720:	686b      	ldr	r3, [r5, #4]
     722:	1afb      	subs	r3, r7, r3
     724:	68aa      	ldr	r2, [r5, #8]
     726:	4293      	cmp	r3, r2
     728:	d30a      	bcc.n	740 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     72a:	4640      	mov	r0, r8
     72c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     72e:	7c23      	ldrb	r3, [r4, #16]
     730:	2b01      	cmp	r3, #1
     732:	d1ef      	bne.n	714 <timer_process_counted+0x48>
			tmp->time_label = time;
     734:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     736:	463a      	mov	r2, r7
     738:	4621      	mov	r1, r4
     73a:	4640      	mov	r0, r8
     73c:	47d0      	blx	sl
     73e:	e7e9      	b.n	714 <timer_process_counted+0x48>
     740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     744:	00000969 	.word	0x00000969
     748:	00000675 	.word	0x00000675

0000074c <timer_init>:
{
     74c:	b538      	push	{r3, r4, r5, lr}
     74e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     750:	4604      	mov	r4, r0
     752:	b178      	cbz	r0, 774 <timer_init+0x28>
     754:	1c08      	adds	r0, r1, #0
     756:	bf18      	it	ne
     758:	2001      	movne	r0, #1
     75a:	223b      	movs	r2, #59	; 0x3b
     75c:	4906      	ldr	r1, [pc, #24]	; (778 <timer_init+0x2c>)
     75e:	4b07      	ldr	r3, [pc, #28]	; (77c <timer_init+0x30>)
     760:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     762:	4629      	mov	r1, r5
     764:	4620      	mov	r0, r4
     766:	4b06      	ldr	r3, [pc, #24]	; (780 <timer_init+0x34>)
     768:	4798      	blx	r3
	descr->time                           = 0;
     76a:	2000      	movs	r0, #0
     76c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     76e:	4b05      	ldr	r3, [pc, #20]	; (784 <timer_init+0x38>)
     770:	6023      	str	r3, [r4, #0]
}
     772:	bd38      	pop	{r3, r4, r5, pc}
     774:	2000      	movs	r0, #0
     776:	e7f0      	b.n	75a <timer_init+0xe>
     778:	000025b8 	.word	0x000025b8
     77c:	0000090d 	.word	0x0000090d
     780:	00000fb1 	.word	0x00000fb1
     784:	000006cd 	.word	0x000006cd

00000788 <timer_start>:
{
     788:	b510      	push	{r4, lr}
	ASSERT(descr);
     78a:	4604      	mov	r4, r0
     78c:	2253      	movs	r2, #83	; 0x53
     78e:	4909      	ldr	r1, [pc, #36]	; (7b4 <timer_start+0x2c>)
     790:	3000      	adds	r0, #0
     792:	bf18      	it	ne
     794:	2001      	movne	r0, #1
     796:	4b08      	ldr	r3, [pc, #32]	; (7b8 <timer_start+0x30>)
     798:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     79a:	4620      	mov	r0, r4
     79c:	4b07      	ldr	r3, [pc, #28]	; (7bc <timer_start+0x34>)
     79e:	4798      	blx	r3
     7a0:	b920      	cbnz	r0, 7ac <timer_start+0x24>
	_timer_start(&descr->device);
     7a2:	4620      	mov	r0, r4
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <timer_start+0x38>)
     7a6:	4798      	blx	r3
	return ERR_NONE;
     7a8:	2000      	movs	r0, #0
     7aa:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     7ac:	f06f 0010 	mvn.w	r0, #16
}
     7b0:	bd10      	pop	{r4, pc}
     7b2:	bf00      	nop
     7b4:	000025b8 	.word	0x000025b8
     7b8:	0000090d 	.word	0x0000090d
     7bc:	00001081 	.word	0x00001081
     7c0:	00001025 	.word	0x00001025

000007c4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     7c8:	460f      	mov	r7, r1
     7ca:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7cc:	4604      	mov	r4, r0
     7ce:	b328      	cbz	r0, 81c <usart_sync_write+0x58>
     7d0:	b331      	cbz	r1, 820 <usart_sync_write+0x5c>
     7d2:	1c10      	adds	r0, r2, #0
     7d4:	bf18      	it	ne
     7d6:	2001      	movne	r0, #1
     7d8:	22f1      	movs	r2, #241	; 0xf1
     7da:	4912      	ldr	r1, [pc, #72]	; (824 <usart_sync_write+0x60>)
     7dc:	4b12      	ldr	r3, [pc, #72]	; (828 <usart_sync_write+0x64>)
     7de:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     7e0:	3408      	adds	r4, #8
     7e2:	4d12      	ldr	r5, [pc, #72]	; (82c <usart_sync_write+0x68>)
     7e4:	4620      	mov	r0, r4
     7e6:	47a8      	blx	r5
     7e8:	2800      	cmp	r0, #0
     7ea:	d0fb      	beq.n	7e4 <usart_sync_write+0x20>
     7ec:	3f01      	subs	r7, #1
     7ee:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     7f0:	f8df 9040 	ldr.w	r9, [pc, #64]	; 834 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     7f4:	4d0d      	ldr	r5, [pc, #52]	; (82c <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     7f6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     7fa:	4620      	mov	r0, r4
     7fc:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     7fe:	4620      	mov	r0, r4
     800:	47a8      	blx	r5
     802:	2800      	cmp	r0, #0
     804:	d0fb      	beq.n	7fe <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     806:	3601      	adds	r6, #1
     808:	4546      	cmp	r6, r8
     80a:	d3f4      	bcc.n	7f6 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     80c:	4d08      	ldr	r5, [pc, #32]	; (830 <usart_sync_write+0x6c>)
     80e:	4620      	mov	r0, r4
     810:	47a8      	blx	r5
     812:	2800      	cmp	r0, #0
     814:	d0fb      	beq.n	80e <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     816:	4630      	mov	r0, r6
     818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     81c:	2000      	movs	r0, #0
     81e:	e7db      	b.n	7d8 <usart_sync_write+0x14>
     820:	2000      	movs	r0, #0
     822:	e7d9      	b.n	7d8 <usart_sync_write+0x14>
     824:	000025d0 	.word	0x000025d0
     828:	0000090d 	.word	0x0000090d
     82c:	000011f3 	.word	0x000011f3
     830:	000011fd 	.word	0x000011fd
     834:	000011e5 	.word	0x000011e5

00000838 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     83c:	460f      	mov	r7, r1
     83e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     840:	4604      	mov	r4, r0
     842:	b1e0      	cbz	r0, 87e <usart_sync_read+0x46>
     844:	b1e9      	cbz	r1, 882 <usart_sync_read+0x4a>
     846:	1c10      	adds	r0, r2, #0
     848:	bf18      	it	ne
     84a:	2001      	movne	r0, #1
     84c:	f44f 7286 	mov.w	r2, #268	; 0x10c
     850:	490d      	ldr	r1, [pc, #52]	; (888 <usart_sync_read+0x50>)
     852:	4b0e      	ldr	r3, [pc, #56]	; (88c <usart_sync_read+0x54>)
     854:	4798      	blx	r3
     856:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     858:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     85a:	3408      	adds	r4, #8
     85c:	4d0c      	ldr	r5, [pc, #48]	; (890 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     85e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 894 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     862:	4620      	mov	r0, r4
     864:	47a8      	blx	r5
     866:	2800      	cmp	r0, #0
     868:	d0fb      	beq.n	862 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     86a:	4620      	mov	r0, r4
     86c:	47c8      	blx	r9
     86e:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     872:	3601      	adds	r6, #1
     874:	4546      	cmp	r6, r8
     876:	d3f4      	bcc.n	862 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     878:	4630      	mov	r0, r6
     87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     87e:	2000      	movs	r0, #0
     880:	e7e4      	b.n	84c <usart_sync_read+0x14>
     882:	2000      	movs	r0, #0
     884:	e7e2      	b.n	84c <usart_sync_read+0x14>
     886:	bf00      	nop
     888:	000025d0 	.word	0x000025d0
     88c:	0000090d 	.word	0x0000090d
     890:	00001207 	.word	0x00001207
     894:	000011eb 	.word	0x000011eb

00000898 <usart_sync_init>:
{
     898:	b538      	push	{r3, r4, r5, lr}
     89a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     89c:	4604      	mov	r4, r0
     89e:	b198      	cbz	r0, 8c8 <usart_sync_init+0x30>
     8a0:	1c08      	adds	r0, r1, #0
     8a2:	bf18      	it	ne
     8a4:	2001      	movne	r0, #1
     8a6:	2234      	movs	r2, #52	; 0x34
     8a8:	4908      	ldr	r1, [pc, #32]	; (8cc <usart_sync_init+0x34>)
     8aa:	4b09      	ldr	r3, [pc, #36]	; (8d0 <usart_sync_init+0x38>)
     8ac:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     8ae:	4629      	mov	r1, r5
     8b0:	f104 0008 	add.w	r0, r4, #8
     8b4:	4b07      	ldr	r3, [pc, #28]	; (8d4 <usart_sync_init+0x3c>)
     8b6:	4798      	blx	r3
	if (init_status) {
     8b8:	4603      	mov	r3, r0
     8ba:	b918      	cbnz	r0, 8c4 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     8bc:	4a06      	ldr	r2, [pc, #24]	; (8d8 <usart_sync_init+0x40>)
     8be:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     8c0:	4a06      	ldr	r2, [pc, #24]	; (8dc <usart_sync_init+0x44>)
     8c2:	6022      	str	r2, [r4, #0]
}
     8c4:	4618      	mov	r0, r3
     8c6:	bd38      	pop	{r3, r4, r5, pc}
     8c8:	2000      	movs	r0, #0
     8ca:	e7ec      	b.n	8a6 <usart_sync_init+0xe>
     8cc:	000025d0 	.word	0x000025d0
     8d0:	0000090d 	.word	0x0000090d
     8d4:	000011a5 	.word	0x000011a5
     8d8:	00000839 	.word	0x00000839
     8dc:	000007c5 	.word	0x000007c5

000008e0 <usart_sync_enable>:
{
     8e0:	b510      	push	{r4, lr}
	ASSERT(descr);
     8e2:	4604      	mov	r4, r0
     8e4:	2253      	movs	r2, #83	; 0x53
     8e6:	4906      	ldr	r1, [pc, #24]	; (900 <usart_sync_enable+0x20>)
     8e8:	3000      	adds	r0, #0
     8ea:	bf18      	it	ne
     8ec:	2001      	movne	r0, #1
     8ee:	4b05      	ldr	r3, [pc, #20]	; (904 <usart_sync_enable+0x24>)
     8f0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     8f2:	f104 0008 	add.w	r0, r4, #8
     8f6:	4b04      	ldr	r3, [pc, #16]	; (908 <usart_sync_enable+0x28>)
     8f8:	4798      	blx	r3
}
     8fa:	2000      	movs	r0, #0
     8fc:	bd10      	pop	{r4, pc}
     8fe:	bf00      	nop
     900:	000025d0 	.word	0x000025d0
     904:	0000090d 	.word	0x0000090d
     908:	000011d1 	.word	0x000011d1

0000090c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     90c:	b900      	cbnz	r0, 910 <assert+0x4>
		__asm("BKPT #0");
     90e:	be00      	bkpt	0x0000
     910:	4770      	bx	lr

00000912 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     912:	6803      	ldr	r3, [r0, #0]
     914:	b14b      	cbz	r3, 92a <is_list_element+0x18>
		if (it == element) {
     916:	428b      	cmp	r3, r1
     918:	d009      	beq.n	92e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     91a:	681b      	ldr	r3, [r3, #0]
     91c:	b11b      	cbz	r3, 926 <is_list_element+0x14>
		if (it == element) {
     91e:	4299      	cmp	r1, r3
     920:	d1fb      	bne.n	91a <is_list_element+0x8>
			return true;
     922:	2001      	movs	r0, #1
		}
	}

	return false;
}
     924:	4770      	bx	lr
	return false;
     926:	2000      	movs	r0, #0
     928:	4770      	bx	lr
     92a:	2000      	movs	r0, #0
     92c:	4770      	bx	lr
			return true;
     92e:	2001      	movs	r0, #1
     930:	4770      	bx	lr
	...

00000934 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     934:	b538      	push	{r3, r4, r5, lr}
     936:	4604      	mov	r4, r0
     938:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     93a:	4b06      	ldr	r3, [pc, #24]	; (954 <list_insert_as_head+0x20>)
     93c:	4798      	blx	r3
     93e:	f080 0001 	eor.w	r0, r0, #1
     942:	2239      	movs	r2, #57	; 0x39
     944:	4904      	ldr	r1, [pc, #16]	; (958 <list_insert_as_head+0x24>)
     946:	b2c0      	uxtb	r0, r0
     948:	4b04      	ldr	r3, [pc, #16]	; (95c <list_insert_as_head+0x28>)
     94a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     94c:	6823      	ldr	r3, [r4, #0]
     94e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     950:	6025      	str	r5, [r4, #0]
     952:	bd38      	pop	{r3, r4, r5, pc}
     954:	00000913 	.word	0x00000913
     958:	000025ec 	.word	0x000025ec
     95c:	0000090d 	.word	0x0000090d

00000960 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     960:	6803      	ldr	r3, [r0, #0]
     962:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     964:	6001      	str	r1, [r0, #0]
     966:	4770      	bx	lr

00000968 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     968:	6803      	ldr	r3, [r0, #0]
     96a:	b10b      	cbz	r3, 970 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     96c:	681a      	ldr	r2, [r3, #0]
     96e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     970:	4618      	mov	r0, r3
     972:	4770      	bx	lr

00000974 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     974:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     976:	4a06      	ldr	r2, [pc, #24]	; (990 <_sbrk+0x1c>)
     978:	6812      	ldr	r2, [r2, #0]
     97a:	b122      	cbz	r2, 986 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     97c:	4a04      	ldr	r2, [pc, #16]	; (990 <_sbrk+0x1c>)
     97e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     980:	4403      	add	r3, r0
     982:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     984:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     986:	4903      	ldr	r1, [pc, #12]	; (994 <_sbrk+0x20>)
     988:	4a01      	ldr	r2, [pc, #4]	; (990 <_sbrk+0x1c>)
     98a:	6011      	str	r1, [r2, #0]
     98c:	e7f6      	b.n	97c <_sbrk+0x8>
     98e:	bf00      	nop
     990:	2000009c 	.word	0x2000009c
     994:	20010688 	.word	0x20010688

00000998 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     998:	f04f 30ff 	mov.w	r0, #4294967295
     99c:	4770      	bx	lr

0000099e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     99e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     9a2:	604b      	str	r3, [r1, #4]

	return 0;
}
     9a4:	2000      	movs	r0, #0
     9a6:	4770      	bx	lr

000009a8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     9a8:	2001      	movs	r0, #1
     9aa:	4770      	bx	lr

000009ac <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     9ac:	2000      	movs	r0, #0
     9ae:	4770      	bx	lr

000009b0 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     9b0:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
     9b2:	4b5e      	ldr	r3, [pc, #376]	; (b2c <_adc_init+0x17c>)
     9b4:	4298      	cmp	r0, r3
     9b6:	f000 809c 	beq.w	af2 <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
     9ba:	4b5d      	ldr	r3, [pc, #372]	; (b30 <_adc_init+0x180>)
     9bc:	4298      	cmp	r0, r3
     9be:	f000 80a6 	beq.w	b0e <_adc_init+0x15e>
	uint16_t calib_reg = 0;
     9c2:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     9c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     9c6:	f013 0f01 	tst.w	r3, #1
     9ca:	d11b      	bne.n	a04 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     9cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
     9ce:	f013 0f03 	tst.w	r3, #3
     9d2:	d1fb      	bne.n	9cc <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     9d4:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     9d6:	f013 0f02 	tst.w	r3, #2
     9da:	d00d      	beq.n	9f8 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     9dc:	8803      	ldrh	r3, [r0, #0]
     9de:	f023 0302 	bic.w	r3, r3, #2
     9e2:	041b      	lsls	r3, r3, #16
     9e4:	0c1b      	lsrs	r3, r3, #16
     9e6:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     9e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
     9ea:	f013 0f03 	tst.w	r3, #3
     9ee:	d1fb      	bne.n	9e8 <_adc_init+0x38>
     9f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
     9f2:	f013 0f02 	tst.w	r3, #2
     9f6:	d1fb      	bne.n	9f0 <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     9f8:	2301      	movs	r3, #1
     9fa:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     9fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
     9fe:	f013 0f03 	tst.w	r3, #3
     a02:	d1fb      	bne.n	9fc <_adc_init+0x4c>
     a04:	6b03      	ldr	r3, [r0, #48]	; 0x30
     a06:	f013 0f01 	tst.w	r3, #1
     a0a:	d1fb      	bne.n	a04 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     a0c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     a10:	2316      	movs	r3, #22
     a12:	4a48      	ldr	r2, [pc, #288]	; (b34 <_adc_init+0x184>)
     a14:	fb03 2301 	mla	r3, r3, r1, r2
     a18:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
     a1a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     a1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
     a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
     a22:	2b00      	cmp	r3, #0
     a24:	d1fa      	bne.n	a1c <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     a26:	2316      	movs	r3, #22
     a28:	4a42      	ldr	r2, [pc, #264]	; (b34 <_adc_init+0x184>)
     a2a:	fb03 2301 	mla	r3, r3, r1, r2
     a2e:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
     a30:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     a32:	6b03      	ldr	r3, [r0, #48]	; 0x30
     a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
     a38:	2b00      	cmp	r3, #0
     a3a:	d1fa      	bne.n	a32 <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     a3c:	2316      	movs	r3, #22
     a3e:	4a3d      	ldr	r2, [pc, #244]	; (b34 <_adc_init+0x184>)
     a40:	fb03 2301 	mla	r3, r3, r1, r2
     a44:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
     a46:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     a48:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
     a4a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     a4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
     a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
     a52:	2b00      	cmp	r3, #0
     a54:	d1fa      	bne.n	a4c <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     a56:	2316      	movs	r3, #22
     a58:	4a36      	ldr	r2, [pc, #216]	; (b34 <_adc_init+0x184>)
     a5a:	fb03 2301 	mla	r3, r3, r1, r2
     a5e:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
     a60:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     a62:	6b03      	ldr	r3, [r0, #48]	; 0x30
     a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
     a68:	2b00      	cmp	r3, #0
     a6a:	d1fa      	bne.n	a62 <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     a6c:	2316      	movs	r3, #22
     a6e:	4a31      	ldr	r2, [pc, #196]	; (b34 <_adc_init+0x184>)
     a70:	fb03 2301 	mla	r3, r3, r1, r2
     a74:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
     a76:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     a78:	6b03      	ldr	r3, [r0, #48]	; 0x30
     a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
     a7e:	2b00      	cmp	r3, #0
     a80:	d1fa      	bne.n	a78 <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     a82:	2316      	movs	r3, #22
     a84:	4a2b      	ldr	r2, [pc, #172]	; (b34 <_adc_init+0x184>)
     a86:	fb03 2301 	mla	r3, r3, r1, r2
     a8a:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
     a8c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     a8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
     a90:	f013 0f80 	tst.w	r3, #128	; 0x80
     a94:	d1fb      	bne.n	a8e <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     a96:	2316      	movs	r3, #22
     a98:	4a26      	ldr	r2, [pc, #152]	; (b34 <_adc_init+0x184>)
     a9a:	fb03 2301 	mla	r3, r3, r1, r2
     a9e:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
     aa0:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     aa2:	6b03      	ldr	r3, [r0, #48]	; 0x30
     aa4:	f413 7f80 	tst.w	r3, #256	; 0x100
     aa8:	d1fb      	bne.n	aa2 <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     aaa:	2316      	movs	r3, #22
     aac:	4a21      	ldr	r2, [pc, #132]	; (b34 <_adc_init+0x184>)
     aae:	fb03 2301 	mla	r3, r3, r1, r2
     ab2:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
     ab4:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ab6:	6b03      	ldr	r3, [r0, #48]	; 0x30
     ab8:	f413 7f00 	tst.w	r3, #512	; 0x200
     abc:	d1fb      	bne.n	ab6 <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     abe:	2316      	movs	r3, #22
     ac0:	4a1c      	ldr	r2, [pc, #112]	; (b34 <_adc_init+0x184>)
     ac2:	fb03 2301 	mla	r3, r3, r1, r2
     ac6:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
     ac8:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     aca:	6b03      	ldr	r3, [r0, #48]	; 0x30
     acc:	f413 6f80 	tst.w	r3, #1024	; 0x400
     ad0:	d1fb      	bne.n	aca <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     ad2:	2216      	movs	r2, #22
     ad4:	4b17      	ldr	r3, [pc, #92]	; (b34 <_adc_init+0x184>)
     ad6:	fb02 3101 	mla	r1, r2, r1, r3
     ada:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
     adc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     ade:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
     ae0:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ae2:	6b03      	ldr	r3, [r0, #48]	; 0x30
     ae4:	f013 0f03 	tst.w	r3, #3
     ae8:	d1fb      	bne.n	ae2 <_adc_init+0x132>

	return ERR_NONE;
}
     aea:	2000      	movs	r0, #0
     aec:	f85d 4b04 	ldr.w	r4, [sp], #4
     af0:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     af2:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	00da      	lsls	r2, r3, #3
     afa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
     afe:	091c      	lsrs	r4, r3, #4
     b00:	f004 0470 	and.w	r4, r4, #112	; 0x70
     b04:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
     b06:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     b0a:	431a      	orrs	r2, r3
     b0c:	e75a      	b.n	9c4 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     b0e:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
     b12:	681b      	ldr	r3, [r3, #0]
     b14:	0ada      	lsrs	r2, r3, #11
     b16:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
     b1a:	0c9c      	lsrs	r4, r3, #18
     b1c:	f004 0470 	and.w	r4, r4, #112	; 0x70
     b20:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
     b22:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     b26:	431a      	orrs	r2, r3
     b28:	e74c      	b.n	9c4 <_adc_init+0x14>
     b2a:	bf00      	nop
     b2c:	43001c00 	.word	0x43001c00
     b30:	43002000 	.word	0x43002000
     b34:	0000260c 	.word	0x0000260c

00000b38 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     b38:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
     b3c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
     b40:	f3c0 2087 	ubfx	r0, r0, #10, #8
     b44:	2801      	cmp	r0, #1
     b46:	d007      	beq.n	b58 <_adc_get_regs+0x20>
{
     b48:	b508      	push	{r3, lr}
	ASSERT(false);
     b4a:	2288      	movs	r2, #136	; 0x88
     b4c:	4903      	ldr	r1, [pc, #12]	; (b5c <_adc_get_regs+0x24>)
     b4e:	2000      	movs	r0, #0
     b50:	4b03      	ldr	r3, [pc, #12]	; (b60 <_adc_get_regs+0x28>)
     b52:	4798      	blx	r3
}
     b54:	2000      	movs	r0, #0
     b56:	bd08      	pop	{r3, pc}
     b58:	2000      	movs	r0, #0
     b5a:	4770      	bx	lr
     b5c:	00002624 	.word	0x00002624
     b60:	0000090d 	.word	0x0000090d

00000b64 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     b64:	b538      	push	{r3, r4, r5, lr}
     b66:	460c      	mov	r4, r1
	ASSERT(device);
     b68:	4605      	mov	r5, r0
     b6a:	22d9      	movs	r2, #217	; 0xd9
     b6c:	4907      	ldr	r1, [pc, #28]	; (b8c <_adc_sync_init+0x28>)
     b6e:	3000      	adds	r0, #0
     b70:	bf18      	it	ne
     b72:	2001      	movne	r0, #1
     b74:	4b06      	ldr	r3, [pc, #24]	; (b90 <_adc_sync_init+0x2c>)
     b76:	4798      	blx	r3

	device->hw = hw;
     b78:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     b7a:	4620      	mov	r0, r4
     b7c:	4b05      	ldr	r3, [pc, #20]	; (b94 <_adc_sync_init+0x30>)
     b7e:	4798      	blx	r3
     b80:	4601      	mov	r1, r0
     b82:	4620      	mov	r0, r4
     b84:	4b04      	ldr	r3, [pc, #16]	; (b98 <_adc_sync_init+0x34>)
     b86:	4798      	blx	r3
}
     b88:	bd38      	pop	{r3, r4, r5, pc}
     b8a:	bf00      	nop
     b8c:	00002624 	.word	0x00002624
     b90:	0000090d 	.word	0x0000090d
     b94:	00000b39 	.word	0x00000b39
     b98:	000009b1 	.word	0x000009b1

00000b9c <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     b9c:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     b9e:	8813      	ldrh	r3, [r2, #0]
     ba0:	b29b      	uxth	r3, r3
     ba2:	f043 0302 	orr.w	r3, r3, #2
     ba6:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ba8:	6b13      	ldr	r3, [r2, #48]	; 0x30
     baa:	f013 0f03 	tst.w	r3, #3
     bae:	d1fb      	bne.n	ba8 <_adc_sync_enable_channel+0xc>
}
     bb0:	4770      	bx	lr
	...

00000bb4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     bb4:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     bb6:	4a0c      	ldr	r2, [pc, #48]	; (be8 <_init_chip+0x34>)
     bb8:	8813      	ldrh	r3, [r2, #0]
     bba:	b29b      	uxth	r3, r3
     bbc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     bbe:	4b0b      	ldr	r3, [pc, #44]	; (bec <_init_chip+0x38>)
     bc0:	4798      	blx	r3
	_oscctrl_init_sources();
     bc2:	4b0b      	ldr	r3, [pc, #44]	; (bf0 <_init_chip+0x3c>)
     bc4:	4798      	blx	r3
	_mclk_init();
     bc6:	4b0b      	ldr	r3, [pc, #44]	; (bf4 <_init_chip+0x40>)
     bc8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     bca:	4b0b      	ldr	r3, [pc, #44]	; (bf8 <_init_chip+0x44>)
     bcc:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     bce:	f640 70ff 	movw	r0, #4095	; 0xfff
     bd2:	4b0a      	ldr	r3, [pc, #40]	; (bfc <_init_chip+0x48>)
     bd4:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
     bd6:	4a0a      	ldr	r2, [pc, #40]	; (c00 <_init_chip+0x4c>)
     bd8:	6913      	ldr	r3, [r2, #16]
     bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     bde:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
     be0:	4b08      	ldr	r3, [pc, #32]	; (c04 <_init_chip+0x50>)
     be2:	4798      	blx	r3
     be4:	bd08      	pop	{r3, pc}
     be6:	bf00      	nop
     be8:	41004000 	.word	0x41004000
     bec:	00000f31 	.word	0x00000f31
     bf0:	00000f45 	.word	0x00000f45
     bf4:	00000f25 	.word	0x00000f25
     bf8:	00000f69 	.word	0x00000f69
     bfc:	00000f01 	.word	0x00000f01
     c00:	40000800 	.word	0x40000800
     c04:	00000c6d 	.word	0x00000c6d

00000c08 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
     c08:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
     c0a:	4a16      	ldr	r2, [pc, #88]	; (c64 <_dmac_handler+0x5c>)
     c0c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
     c0e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
     c12:	eb03 0143 	add.w	r1, r3, r3, lsl #1
     c16:	4814      	ldr	r0, [pc, #80]	; (c68 <_dmac_handler+0x60>)
     c18:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	tmp = ((Dmac *)hw)->INTPEND.reg;
     c1c:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
     c1e:	f412 7f80 	tst.w	r2, #256	; 0x100
     c22:	d105      	bne.n	c30 <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
     c24:	4a0f      	ldr	r2, [pc, #60]	; (c64 <_dmac_handler+0x5c>)
     c26:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
     c28:	f412 7f00 	tst.w	r2, #512	; 0x200
     c2c:	d10b      	bne.n	c46 <_dmac_handler+0x3e>
     c2e:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     c30:	011a      	lsls	r2, r3, #4
     c32:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     c36:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     c3a:	2101      	movs	r1, #1
     c3c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
     c40:	6843      	ldr	r3, [r0, #4]
     c42:	4798      	blx	r3
     c44:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     c46:	011a      	lsls	r2, r3, #4
     c48:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     c4c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     c50:	2102      	movs	r1, #2
     c52:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
     c56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     c5a:	4a03      	ldr	r2, [pc, #12]	; (c68 <_dmac_handler+0x60>)
     c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c60:	4798      	blx	r3
	}
}
     c62:	e7e4      	b.n	c2e <_dmac_handler+0x26>
     c64:	4100a000 	.word	0x4100a000
     c68:	200000a0 	.word	0x200000a0

00000c6c <_dma_init>:
{
     c6c:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     c6e:	4a31      	ldr	r2, [pc, #196]	; (d34 <_dma_init+0xc8>)
     c70:	8813      	ldrh	r3, [r2, #0]
     c72:	f023 0302 	bic.w	r3, r3, #2
     c76:	041b      	lsls	r3, r3, #16
     c78:	0c1b      	lsrs	r3, r3, #16
     c7a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
     c7c:	8853      	ldrh	r3, [r2, #2]
     c7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
     c82:	041b      	lsls	r3, r3, #16
     c84:	0c1b      	lsrs	r3, r3, #16
     c86:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
     c88:	8813      	ldrh	r3, [r2, #0]
     c8a:	b29b      	uxth	r3, r3
     c8c:	f043 0301 	orr.w	r3, r3, #1
     c90:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
     c92:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
     c94:	f013 0f01 	tst.w	r3, #1
     c98:	d1fb      	bne.n	c92 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
     c9a:	4b26      	ldr	r3, [pc, #152]	; (d34 <_dma_init+0xc8>)
     c9c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
     ca0:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
     ca2:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
     ca4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
     ca8:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
     caa:	2100      	movs	r1, #0
     cac:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
     cae:	4a22      	ldr	r2, [pc, #136]	; (d38 <_dma_init+0xcc>)
	((Dmac *)hw)->BASEADDR.reg = data;
     cb0:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
     cb2:	4a22      	ldr	r2, [pc, #136]	; (d3c <_dma_init+0xd0>)
	((Dmac *)hw)->WRBADDR.reg = data;
     cb4:	639a      	str	r2, [r3, #56]	; 0x38
     cb6:	4b22      	ldr	r3, [pc, #136]	; (d40 <_dma_init+0xd4>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
     cb8:	4c1f      	ldr	r4, [pc, #124]	; (d38 <_dma_init+0xcc>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
     cba:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
     cbc:	681d      	ldr	r5, [r3, #0]
     cbe:	0108      	lsls	r0, r1, #4
     cc0:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
     cc4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
     cc8:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
     cca:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
     ccc:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
     cd0:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
     cd2:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
     cd6:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
     cd8:	1822      	adds	r2, r4, r0
     cda:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
     cdc:	60d6      	str	r6, [r2, #12]
     cde:	3101      	adds	r1, #1
     ce0:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
     ce2:	2920      	cmp	r1, #32
     ce4:	d1ea      	bne.n	cbc <_dma_init+0x50>
     ce6:	231f      	movs	r3, #31
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ce8:	2001      	movs	r0, #1
     cea:	4916      	ldr	r1, [pc, #88]	; (d44 <_dma_init+0xd8>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
     cec:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
     cee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     cf2:	d00b      	beq.n	d0c <_dma_init+0xa0>
     cf4:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
     cf6:	2b24      	cmp	r3, #36	; 0x24
     cf8:	d1f8      	bne.n	cec <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
     cfa:	4a0e      	ldr	r2, [pc, #56]	; (d34 <_dma_init+0xc8>)
     cfc:	8813      	ldrh	r3, [r2, #0]
     cfe:	b29b      	uxth	r3, r3
     d00:	f043 0302 	orr.w	r3, r3, #2
     d04:	8013      	strh	r3, [r2, #0]
}
     d06:	2000      	movs	r0, #0
     d08:	bc70      	pop	{r4, r5, r6}
     d0a:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d0c:	095c      	lsrs	r4, r3, #5
     d0e:	f002 021f 	and.w	r2, r2, #31
     d12:	fa00 f202 	lsl.w	r2, r0, r2
     d16:	f104 0520 	add.w	r5, r4, #32
     d1a:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     d1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d22:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d26:	f104 0560 	add.w	r5, r4, #96	; 0x60
     d2a:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d2e:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
     d32:	e7df      	b.n	cf4 <_dma_init+0x88>
     d34:	4100a000 	.word	0x4100a000
     d38:	20000270 	.word	0x20000270
     d3c:	20000470 	.word	0x20000470
     d40:	0000263c 	.word	0x0000263c
     d44:	e000e100 	.word	0xe000e100

00000d48 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
     d48:	b991      	cbnz	r1, d70 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
     d4a:	b942      	cbnz	r2, d5e <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
     d4c:	0100      	lsls	r0, r0, #4
     d4e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     d52:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     d56:	2302      	movs	r3, #2
     d58:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
     d5c:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
     d5e:	0100      	lsls	r0, r0, #4
     d60:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     d64:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     d68:	2302      	movs	r3, #2
     d6a:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
     d6e:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
     d70:	2901      	cmp	r1, #1
     d72:	d000      	beq.n	d76 <_dma_set_irq_state+0x2e>
     d74:	4770      	bx	lr
	if (value == 0x0) {
     d76:	b142      	cbz	r2, d8a <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
     d78:	0100      	lsls	r0, r0, #4
     d7a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     d7e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     d82:	2301      	movs	r3, #1
     d84:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
     d88:	e7f4      	b.n	d74 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
     d8a:	0100      	lsls	r0, r0, #4
     d8c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
     d90:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
     d94:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
     d98:	4770      	bx	lr
	...

00000d9c <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     d9c:	4b02      	ldr	r3, [pc, #8]	; (da8 <_dma_set_destination_address+0xc>)
     d9e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     da2:	6081      	str	r1, [r0, #8]
}
     da4:	2000      	movs	r0, #0
     da6:	4770      	bx	lr
     da8:	20000270 	.word	0x20000270

00000dac <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     dac:	4b02      	ldr	r3, [pc, #8]	; (db8 <_dma_set_source_address+0xc>)
     dae:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     db2:	6041      	str	r1, [r0, #4]
}
     db4:	2000      	movs	r0, #0
     db6:	4770      	bx	lr
     db8:	20000270 	.word	0x20000270

00000dbc <_dma_set_data_amount>:
{
     dbc:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
     dbe:	4c14      	ldr	r4, [pc, #80]	; (e10 <_dma_set_data_amount+0x54>)
     dc0:	0102      	lsls	r2, r0, #4
     dc2:	18a3      	adds	r3, r4, r2
     dc4:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     dc6:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
     dc8:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     dcc:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
     dce:	f412 6f00 	tst.w	r2, #2048	; 0x800
     dd2:	d006      	beq.n	de2 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     dd4:	fa01 f403 	lsl.w	r4, r1, r3
     dd8:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
     dda:	4a0d      	ldr	r2, [pc, #52]	; (e10 <_dma_set_data_amount+0x54>)
     ddc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
     de0:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
     de2:	4c0b      	ldr	r4, [pc, #44]	; (e10 <_dma_set_data_amount+0x54>)
     de4:	0102      	lsls	r2, r0, #4
     de6:	18a5      	adds	r5, r4, r2
     de8:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
     dea:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
     dec:	f412 6f80 	tst.w	r2, #1024	; 0x400
     df0:	d005      	beq.n	dfe <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
     df2:	fa01 f303 	lsl.w	r3, r1, r3
     df6:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
     df8:	eb04 1200 	add.w	r2, r4, r0, lsl #4
     dfc:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
     dfe:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
     e00:	4b03      	ldr	r3, [pc, #12]	; (e10 <_dma_set_data_amount+0x54>)
     e02:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     e06:	8041      	strh	r1, [r0, #2]
}
     e08:	2000      	movs	r0, #0
     e0a:	bc30      	pop	{r4, r5}
     e0c:	4770      	bx	lr
     e0e:	bf00      	nop
     e10:	20000270 	.word	0x20000270

00000e14 <_dma_enable_transaction>:
{
     e14:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
     e16:	4c0d      	ldr	r4, [pc, #52]	; (e4c <_dma_enable_transaction+0x38>)
     e18:	0103      	lsls	r3, r0, #4
     e1a:	5ae2      	ldrh	r2, [r4, r3]
     e1c:	b292      	uxth	r2, r2
     e1e:	f042 0201 	orr.w	r2, r2, #1
     e22:	52e2      	strh	r2, [r4, r3]
     e24:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     e28:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     e2e:	f042 0202 	orr.w	r2, r2, #2
     e32:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
     e34:	b131      	cbz	r1, e44 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
     e36:	4a06      	ldr	r2, [pc, #24]	; (e50 <_dma_enable_transaction+0x3c>)
     e38:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
     e3a:	2301      	movs	r3, #1
     e3c:	fa03 f000 	lsl.w	r0, r3, r0
     e40:	4308      	orrs	r0, r1
     e42:	6110      	str	r0, [r2, #16]
}
     e44:	2000      	movs	r0, #0
     e46:	f85d 4b04 	ldr.w	r4, [sp], #4
     e4a:	4770      	bx	lr
     e4c:	20000270 	.word	0x20000270
     e50:	4100a000 	.word	0x4100a000

00000e54 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
     e54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     e58:	4b02      	ldr	r3, [pc, #8]	; (e64 <_dma_get_channel_resource+0x10>)
     e5a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     e5e:	6001      	str	r1, [r0, #0]
}
     e60:	2000      	movs	r0, #0
     e62:	4770      	bx	lr
     e64:	200000a0 	.word	0x200000a0

00000e68 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
     e68:	b508      	push	{r3, lr}
	_dmac_handler();
     e6a:	4b01      	ldr	r3, [pc, #4]	; (e70 <DMAC_0_Handler+0x8>)
     e6c:	4798      	blx	r3
     e6e:	bd08      	pop	{r3, pc}
     e70:	00000c09 	.word	0x00000c09

00000e74 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
     e74:	b508      	push	{r3, lr}
	_dmac_handler();
     e76:	4b01      	ldr	r3, [pc, #4]	; (e7c <DMAC_1_Handler+0x8>)
     e78:	4798      	blx	r3
     e7a:	bd08      	pop	{r3, pc}
     e7c:	00000c09 	.word	0x00000c09

00000e80 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
     e80:	b508      	push	{r3, lr}
	_dmac_handler();
     e82:	4b01      	ldr	r3, [pc, #4]	; (e88 <DMAC_2_Handler+0x8>)
     e84:	4798      	blx	r3
     e86:	bd08      	pop	{r3, pc}
     e88:	00000c09 	.word	0x00000c09

00000e8c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
     e8c:	b508      	push	{r3, lr}
	_dmac_handler();
     e8e:	4b01      	ldr	r3, [pc, #4]	; (e94 <DMAC_3_Handler+0x8>)
     e90:	4798      	blx	r3
     e92:	bd08      	pop	{r3, pc}
     e94:	00000c09 	.word	0x00000c09

00000e98 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
     e98:	b508      	push	{r3, lr}
	_dmac_handler();
     e9a:	4b01      	ldr	r3, [pc, #4]	; (ea0 <DMAC_4_Handler+0x8>)
     e9c:	4798      	blx	r3
     e9e:	bd08      	pop	{r3, pc}
     ea0:	00000c09 	.word	0x00000c09

00000ea4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
     ea4:	b430      	push	{r4, r5}
     ea6:	4814      	ldr	r0, [pc, #80]	; (ef8 <_event_system_init+0x54>)
     ea8:	f100 0543 	add.w	r5, r0, #67	; 0x43
     eac:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
     eae:	4c13      	ldr	r4, [pc, #76]	; (efc <_event_system_init+0x58>)
     eb0:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
     eb2:	f813 1b01 	ldrb.w	r1, [r3], #1
     eb6:	3248      	adds	r2, #72	; 0x48
     eb8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
     ebc:	42ab      	cmp	r3, r5
     ebe:	d1f7      	bne.n	eb0 <_event_system_init+0xc>
     ec0:	480d      	ldr	r0, [pc, #52]	; (ef8 <_event_system_init+0x54>)
     ec2:	f100 0442 	add.w	r4, r0, #66	; 0x42
     ec6:	3080      	adds	r0, #128	; 0x80
     ec8:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
     eca:	f834 3f02 	ldrh.w	r3, [r4, #2]!
     ece:	00ca      	lsls	r2, r1, #3
     ed0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     ed4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
     ed8:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
     eda:	f850 3f04 	ldr.w	r3, [r0, #4]!
     ede:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
     ee0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
     ee4:	43db      	mvns	r3, r3
     ee6:	b2db      	uxtb	r3, r3
     ee8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
     eec:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
     eee:	2920      	cmp	r1, #32
     ef0:	d1eb      	bne.n	eca <_event_system_init+0x26>
	}

	return ERR_NONE;
}
     ef2:	2000      	movs	r0, #0
     ef4:	bc30      	pop	{r4, r5}
     ef6:	4770      	bx	lr
     ef8:	0000273c 	.word	0x0000273c
     efc:	4100e000 	.word	0x4100e000

00000f00 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     f00:	f010 0f01 	tst.w	r0, #1
     f04:	d008      	beq.n	f18 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     f06:	4a05      	ldr	r2, [pc, #20]	; (f1c <_gclk_init_generators_by_fref+0x1c>)
     f08:	4b05      	ldr	r3, [pc, #20]	; (f20 <_gclk_init_generators_by_fref+0x20>)
     f0a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     f0c:	4619      	mov	r1, r3
     f0e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     f12:	684b      	ldr	r3, [r1, #4]
     f14:	4213      	tst	r3, r2
     f16:	d1fc      	bne.n	f12 <_gclk_init_generators_by_fref+0x12>
     f18:	4770      	bx	lr
     f1a:	bf00      	nop
     f1c:	00012101 	.word	0x00012101
     f20:	40001c00 	.word	0x40001c00

00000f24 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     f24:	2201      	movs	r2, #1
     f26:	4b01      	ldr	r3, [pc, #4]	; (f2c <_mclk_init+0x8>)
     f28:	715a      	strb	r2, [r3, #5]
     f2a:	4770      	bx	lr
     f2c:	40000800 	.word	0x40000800

00000f30 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     f30:	4b03      	ldr	r3, [pc, #12]	; (f40 <_osc32kctrl_init_sources+0x10>)
     f32:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     f34:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     f38:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     f3a:	2201      	movs	r2, #1
     f3c:	741a      	strb	r2, [r3, #16]
     f3e:	4770      	bx	lr
     f40:	40001400 	.word	0x40001400

00000f44 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     f44:	4a06      	ldr	r2, [pc, #24]	; (f60 <_oscctrl_init_sources+0x1c>)
     f46:	4b07      	ldr	r3, [pc, #28]	; (f64 <_oscctrl_init_sources+0x20>)
     f48:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     f4a:	461a      	mov	r2, r3
     f4c:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     f4e:	f013 0f02 	tst.w	r3, #2
     f52:	d0fb      	beq.n	f4c <_oscctrl_init_sources+0x8>
	((Oscctrl *)hw)->XOSCCTRL[index].reg |= OSCCTRL_XOSCCTRL_ONDEMAND;
     f54:	4a03      	ldr	r2, [pc, #12]	; (f64 <_oscctrl_init_sources+0x20>)
     f56:	6993      	ldr	r3, [r2, #24]
     f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     f5c:	6193      	str	r3, [r2, #24]
     f5e:	4770      	bx	lr
     f60:	03002646 	.word	0x03002646
     f64:	40001000 	.word	0x40001000

00000f68 <_oscctrl_init_referenced_generators>:

	(void)hw;
}

void _oscctrl_init_referenced_generators(void)
{
     f68:	4770      	bx	lr
	...

00000f6c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     f6c:	b500      	push	{lr}
     f6e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     f70:	4b0d      	ldr	r3, [pc, #52]	; (fa8 <RAMECC_Handler+0x3c>)
     f72:	789b      	ldrb	r3, [r3, #2]
     f74:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     f76:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     f78:	9b01      	ldr	r3, [sp, #4]
     f7a:	f013 0f02 	tst.w	r3, #2
     f7e:	d006      	beq.n	f8e <RAMECC_Handler+0x22>
     f80:	4b0a      	ldr	r3, [pc, #40]	; (fac <RAMECC_Handler+0x40>)
     f82:	681b      	ldr	r3, [r3, #0]
     f84:	b11b      	cbz	r3, f8e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     f86:	4a08      	ldr	r2, [pc, #32]	; (fa8 <RAMECC_Handler+0x3c>)
     f88:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     f8a:	4798      	blx	r3
     f8c:	e009      	b.n	fa2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     f8e:	9b01      	ldr	r3, [sp, #4]
     f90:	f013 0f01 	tst.w	r3, #1
     f94:	d005      	beq.n	fa2 <RAMECC_Handler+0x36>
     f96:	4b05      	ldr	r3, [pc, #20]	; (fac <RAMECC_Handler+0x40>)
     f98:	685b      	ldr	r3, [r3, #4]
     f9a:	b113      	cbz	r3, fa2 <RAMECC_Handler+0x36>
     f9c:	4a02      	ldr	r2, [pc, #8]	; (fa8 <RAMECC_Handler+0x3c>)
     f9e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     fa0:	4798      	blx	r3
	} else {
		return;
	}
}
     fa2:	b003      	add	sp, #12
     fa4:	f85d fb04 	ldr.w	pc, [sp], #4
     fa8:	41020000 	.word	0x41020000
     fac:	20000670 	.word	0x20000670

00000fb0 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
     fb0:	b538      	push	{r3, r4, r5, lr}
     fb2:	460c      	mov	r4, r1
	ASSERT(dev);
     fb4:	4605      	mov	r5, r0
     fb6:	2230      	movs	r2, #48	; 0x30
     fb8:	4917      	ldr	r1, [pc, #92]	; (1018 <_timer_init+0x68>)
     fba:	3000      	adds	r0, #0
     fbc:	bf18      	it	ne
     fbe:	2001      	movne	r0, #1
     fc0:	4b16      	ldr	r3, [pc, #88]	; (101c <_timer_init+0x6c>)
     fc2:	4798      	blx	r3

	dev->hw = hw;
     fc4:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     fc6:	2301      	movs	r3, #1
     fc8:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     fca:	f248 0203 	movw	r2, #32771	; 0x8003
     fce:	6923      	ldr	r3, [r4, #16]
     fd0:	4213      	tst	r3, r2
     fd2:	d1fc      	bne.n	fce <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
     fd4:	68ea      	ldr	r2, [r5, #12]
     fd6:	6913      	ldr	r3, [r2, #16]
     fd8:	f013 0f01 	tst.w	r3, #1
     fdc:	d1fb      	bne.n	fd6 <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
     fde:	f44f 7380 	mov.w	r3, #256	; 0x100
     fe2:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
     fe4:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     fe6:	f248 0380 	movw	r3, #32896	; 0x8080
     fea:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     fec:	f248 0103 	movw	r1, #32771	; 0x8003
     ff0:	6913      	ldr	r3, [r2, #16]
     ff2:	420b      	tst	r3, r1
     ff4:	d1fc      	bne.n	ff0 <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
     ff6:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
     ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
     ffc:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     ffe:	6913      	ldr	r3, [r2, #16]
    1000:	f013 0f60 	tst.w	r3, #96	; 0x60
    1004:	d1fb      	bne.n	ffe <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1006:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1008:	f44f 7280 	mov.w	r2, #256	; 0x100
    100c:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    100e:	4b04      	ldr	r3, [pc, #16]	; (1020 <_timer_init+0x70>)
    1010:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    1012:	2000      	movs	r0, #0
    1014:	bd38      	pop	{r3, r4, r5, pc}
    1016:	bf00      	nop
    1018:	00002840 	.word	0x00002840
    101c:	0000090d 	.word	0x0000090d
    1020:	20000220 	.word	0x20000220

00001024 <_timer_start>:

/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const dev)
{
    1024:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    1026:	4604      	mov	r4, r0
    1028:	b310      	cbz	r0, 1070 <_timer_start+0x4c>
    102a:	68c0      	ldr	r0, [r0, #12]
    102c:	3000      	adds	r0, #0
    102e:	bf18      	it	ne
    1030:	2001      	movne	r0, #1
    1032:	225e      	movs	r2, #94	; 0x5e
    1034:	490f      	ldr	r1, [pc, #60]	; (1074 <_timer_start+0x50>)
    1036:	4b10      	ldr	r3, [pc, #64]	; (1078 <_timer_start+0x54>)
    1038:	4798      	blx	r3
    103a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    103e:	4b0f      	ldr	r3, [pc, #60]	; (107c <_timer_start+0x58>)
    1040:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    1042:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    1044:	2300      	movs	r3, #0
    1046:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1048:	6913      	ldr	r3, [r2, #16]
    104a:	f013 0f08 	tst.w	r3, #8
    104e:	d1fb      	bne.n	1048 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    1050:	68e3      	ldr	r3, [r4, #12]
    1052:	691a      	ldr	r2, [r3, #16]
    1054:	f012 0f08 	tst.w	r2, #8
    1058:	d1fb      	bne.n	1052 <_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    105a:	881a      	ldrh	r2, [r3, #0]
    105c:	b292      	uxth	r2, r2
    105e:	f042 0202 	orr.w	r2, r2, #2
    1062:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1064:	f248 0103 	movw	r1, #32771	; 0x8003
    1068:	691a      	ldr	r2, [r3, #16]
    106a:	420a      	tst	r2, r1
    106c:	d1fc      	bne.n	1068 <_timer_start+0x44>
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
}
    106e:	bd10      	pop	{r4, pc}
    1070:	2000      	movs	r0, #0
    1072:	e7de      	b.n	1032 <_timer_start+0xe>
    1074:	00002840 	.word	0x00002840
    1078:	0000090d 	.word	0x0000090d
    107c:	e000e100 	.word	0xe000e100

00001080 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    1080:	68c2      	ldr	r2, [r0, #12]
    1082:	f248 0103 	movw	r1, #32771	; 0x8003
    1086:	6913      	ldr	r3, [r2, #16]
    1088:	420b      	tst	r3, r1
    108a:	d1fc      	bne.n	1086 <_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    108c:	8810      	ldrh	r0, [r2, #0]
}
    108e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1092:	4770      	bx	lr

00001094 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1094:	2000      	movs	r0, #0
    1096:	4770      	bx	lr

00001098 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1098:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    109a:	4b08      	ldr	r3, [pc, #32]	; (10bc <RTC_Handler+0x24>)
    109c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    109e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    10a0:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    10a2:	f413 7f80 	tst.w	r3, #256	; 0x100
    10a6:	d007      	beq.n	10b8 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    10a8:	6823      	ldr	r3, [r4, #0]
    10aa:	b10b      	cbz	r3, 10b0 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    10ac:	4620      	mov	r0, r4
    10ae:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    10b0:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    10b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    10b6:	819a      	strh	r2, [r3, #12]
    10b8:	bd10      	pop	{r4, pc}
    10ba:	bf00      	nop
    10bc:	20000220 	.word	0x20000220

000010c0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    10c0:	b470      	push	{r4, r5, r6}
    10c2:	b089      	sub	sp, #36	; 0x24
    10c4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    10c6:	466c      	mov	r4, sp
    10c8:	4d0d      	ldr	r5, [pc, #52]	; (1100 <_sercom_get_hardware_index+0x40>)
    10ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    10d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    10d6:	9b00      	ldr	r3, [sp, #0]
    10d8:	42b3      	cmp	r3, r6
    10da:	d00d      	beq.n	10f8 <_sercom_get_hardware_index+0x38>
    10dc:	4631      	mov	r1, r6
    10de:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10e0:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    10e2:	f853 2b04 	ldr.w	r2, [r3], #4
    10e6:	428a      	cmp	r2, r1
    10e8:	d007      	beq.n	10fa <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10ea:	3001      	adds	r0, #1
    10ec:	2808      	cmp	r0, #8
    10ee:	d1f8      	bne.n	10e2 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    10f0:	2000      	movs	r0, #0
}
    10f2:	b009      	add	sp, #36	; 0x24
    10f4:	bc70      	pop	{r4, r5, r6}
    10f6:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10f8:	2000      	movs	r0, #0
			return i;
    10fa:	b2c0      	uxtb	r0, r0
    10fc:	e7f9      	b.n	10f2 <_sercom_get_hardware_index+0x32>
    10fe:	bf00      	nop
    1100:	00002858 	.word	0x00002858

00001104 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1104:	b510      	push	{r4, lr}
    1106:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1108:	4b21      	ldr	r3, [pc, #132]	; (1190 <_usart_init+0x8c>)
    110a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    110c:	2802      	cmp	r0, #2
    110e:	d005      	beq.n	111c <_usart_init+0x18>
	ASSERT(false);
    1110:	f240 2247 	movw	r2, #583	; 0x247
    1114:	491f      	ldr	r1, [pc, #124]	; (1194 <_usart_init+0x90>)
    1116:	2000      	movs	r0, #0
    1118:	4b1f      	ldr	r3, [pc, #124]	; (1198 <_usart_init+0x94>)
    111a:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    111c:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    111e:	f013 0f01 	tst.w	r3, #1
    1122:	d119      	bne.n	1158 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1124:	69e3      	ldr	r3, [r4, #28]
    1126:	f013 0f03 	tst.w	r3, #3
    112a:	d1fb      	bne.n	1124 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    112c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    112e:	f013 0f02 	tst.w	r3, #2
    1132:	d00b      	beq.n	114c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1134:	6823      	ldr	r3, [r4, #0]
    1136:	f023 0302 	bic.w	r3, r3, #2
    113a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    113c:	69e3      	ldr	r3, [r4, #28]
    113e:	f013 0f03 	tst.w	r3, #3
    1142:	d1fb      	bne.n	113c <_usart_init+0x38>
    1144:	69e3      	ldr	r3, [r4, #28]
    1146:	f013 0f02 	tst.w	r3, #2
    114a:	d1fb      	bne.n	1144 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    114c:	2305      	movs	r3, #5
    114e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1150:	69e3      	ldr	r3, [r4, #28]
    1152:	f013 0f03 	tst.w	r3, #3
    1156:	d1fb      	bne.n	1150 <_usart_init+0x4c>
    1158:	69e3      	ldr	r3, [r4, #28]
    115a:	f013 0f01 	tst.w	r3, #1
    115e:	d1fb      	bne.n	1158 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1160:	4b0e      	ldr	r3, [pc, #56]	; (119c <_usart_init+0x98>)
    1162:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1164:	69e3      	ldr	r3, [r4, #28]
    1166:	f013 0f03 	tst.w	r3, #3
    116a:	d1fb      	bne.n	1164 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    116c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1170:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1172:	69e3      	ldr	r3, [r4, #28]
    1174:	f013 0f1f 	tst.w	r3, #31
    1178:	d1fb      	bne.n	1172 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    117a:	4b09      	ldr	r3, [pc, #36]	; (11a0 <_usart_init+0x9c>)
    117c:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    117e:	f64d 03ad 	movw	r3, #55469	; 0xd8ad
    1182:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1184:	2000      	movs	r0, #0
    1186:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1188:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    118c:	bd10      	pop	{r4, pc}
    118e:	bf00      	nop
    1190:	000010c1 	.word	0x000010c1
    1194:	00002890 	.word	0x00002890
    1198:	0000090d 	.word	0x0000090d
    119c:	40100004 	.word	0x40100004
    11a0:	00700002 	.word	0x00700002

000011a4 <_usart_sync_init>:
{
    11a4:	b538      	push	{r3, r4, r5, lr}
    11a6:	460c      	mov	r4, r1
	ASSERT(device);
    11a8:	4605      	mov	r5, r0
    11aa:	22bb      	movs	r2, #187	; 0xbb
    11ac:	4905      	ldr	r1, [pc, #20]	; (11c4 <_usart_sync_init+0x20>)
    11ae:	3000      	adds	r0, #0
    11b0:	bf18      	it	ne
    11b2:	2001      	movne	r0, #1
    11b4:	4b04      	ldr	r3, [pc, #16]	; (11c8 <_usart_sync_init+0x24>)
    11b6:	4798      	blx	r3
	device->hw = hw;
    11b8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    11ba:	4620      	mov	r0, r4
    11bc:	4b03      	ldr	r3, [pc, #12]	; (11cc <_usart_sync_init+0x28>)
    11be:	4798      	blx	r3
}
    11c0:	bd38      	pop	{r3, r4, r5, pc}
    11c2:	bf00      	nop
    11c4:	00002890 	.word	0x00002890
    11c8:	0000090d 	.word	0x0000090d
    11cc:	00001105 	.word	0x00001105

000011d0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    11d0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    11d2:	6813      	ldr	r3, [r2, #0]
    11d4:	f043 0302 	orr.w	r3, r3, #2
    11d8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11da:	69d3      	ldr	r3, [r2, #28]
    11dc:	f013 0f03 	tst.w	r3, #3
    11e0:	d1fb      	bne.n	11da <_usart_sync_enable+0xa>
}
    11e2:	4770      	bx	lr

000011e4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    11e4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    11e6:	6299      	str	r1, [r3, #40]	; 0x28
    11e8:	4770      	bx	lr

000011ea <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    11ea:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    11ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    11ee:	b2c0      	uxtb	r0, r0
    11f0:	4770      	bx	lr

000011f2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    11f2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    11f4:	7e18      	ldrb	r0, [r3, #24]
}
    11f6:	f000 0001 	and.w	r0, r0, #1
    11fa:	4770      	bx	lr

000011fc <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    11fc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    11fe:	7e18      	ldrb	r0, [r3, #24]
}
    1200:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1204:	4770      	bx	lr

00001206 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1206:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1208:	7e18      	ldrb	r0, [r3, #24]
}
    120a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    120e:	4770      	bx	lr

00001210 <adc_sram_dma_callback>:
volatile bool         adc_dma_done    = 0;
struct _dma_resource *adc_sram_dma_resource;

void adc_sram_dma_callback(struct _dma_resource *adc_dma_res)
{
	adc_dma_done = true;
    1210:	2201      	movs	r2, #1
    1212:	4b01      	ldr	r3, [pc, #4]	; (1218 <adc_sram_dma_callback+0x8>)
    1214:	701a      	strb	r2, [r3, #0]
    1216:	4770      	bx	lr
    1218:	20000224 	.word	0x20000224

0000121c <adc_dmac_sequence_init>:
}

void adc_dmac_sequence_init()
{
    121c:	b508      	push	{r3, lr}
	/* Configure the DMAC source address, destination address,
	 * next descriptor address, data count and Enable the DMAC Channel */
	_dma_set_source_address(DMAC_CHANNEL_ADC_SEQ, (const void *)adc_seq_regs);
    121e:	4908      	ldr	r1, [pc, #32]	; (1240 <adc_dmac_sequence_init+0x24>)
    1220:	2000      	movs	r0, #0
    1222:	4b08      	ldr	r3, [pc, #32]	; (1244 <adc_dmac_sequence_init+0x28>)
    1224:	4798      	blx	r3
	_dma_set_destination_address(DMAC_CHANNEL_ADC_SEQ, (const void *)&ADC1->DSEQDATA.reg);
    1226:	4908      	ldr	r1, [pc, #32]	; (1248 <adc_dmac_sequence_init+0x2c>)
    1228:	2000      	movs	r0, #0
    122a:	4b08      	ldr	r3, [pc, #32]	; (124c <adc_dmac_sequence_init+0x30>)
    122c:	4798      	blx	r3
	_dma_set_data_amount(DMAC_CHANNEL_ADC_SEQ, 4);
    122e:	2104      	movs	r1, #4
    1230:	2000      	movs	r0, #0
    1232:	4b07      	ldr	r3, [pc, #28]	; (1250 <adc_dmac_sequence_init+0x34>)
    1234:	4798      	blx	r3
	_dma_enable_transaction(DMAC_CHANNEL_ADC_SEQ, false);
    1236:	2100      	movs	r1, #0
    1238:	4608      	mov	r0, r1
    123a:	4b06      	ldr	r3, [pc, #24]	; (1254 <adc_dmac_sequence_init+0x38>)
    123c:	4798      	blx	r3
    123e:	bd08      	pop	{r3, pc}
    1240:	20000000 	.word	0x20000000
    1244:	00000dad 	.word	0x00000dad
    1248:	43002034 	.word	0x43002034
    124c:	00000d9d 	.word	0x00000d9d
    1250:	00000dbd 	.word	0x00000dbd
    1254:	00000e15 	.word	0x00000e15

00001258 <adc_sram_dmac_init>:
}

void adc_sram_dmac_init()
{
    1258:	b510      	push	{r4, lr}
	_dma_set_source_address(DMAC_CHANNEL_ADC_SRAM, (const void *)&ADC1->RESULT.reg);
    125a:	490f      	ldr	r1, [pc, #60]	; (1298 <adc_sram_dmac_init+0x40>)
    125c:	2001      	movs	r0, #1
    125e:	4b0f      	ldr	r3, [pc, #60]	; (129c <adc_sram_dmac_init+0x44>)
    1260:	4798      	blx	r3
	_dma_set_destination_address(DMAC_CHANNEL_ADC_SRAM, (const void *)adc_res);
    1262:	490f      	ldr	r1, [pc, #60]	; (12a0 <adc_sram_dmac_init+0x48>)
    1264:	2001      	movs	r0, #1
    1266:	4b0f      	ldr	r3, [pc, #60]	; (12a4 <adc_sram_dmac_init+0x4c>)
    1268:	4798      	blx	r3
	_dma_set_data_amount(DMAC_CHANNEL_ADC_SRAM, 4);
    126a:	2104      	movs	r1, #4
    126c:	2001      	movs	r0, #1
    126e:	4b0e      	ldr	r3, [pc, #56]	; (12a8 <adc_sram_dmac_init+0x50>)
    1270:	4798      	blx	r3
	_dma_set_irq_state(DMAC_CHANNEL_ADC_SRAM, DMA_TRANSFER_COMPLETE_CB, true);
    1272:	2201      	movs	r2, #1
    1274:	2100      	movs	r1, #0
    1276:	4610      	mov	r0, r2
    1278:	4b0c      	ldr	r3, [pc, #48]	; (12ac <adc_sram_dmac_init+0x54>)
    127a:	4798      	blx	r3
	_dma_get_channel_resource(&adc_sram_dma_resource, DMAC_CHANNEL_ADC_SRAM);
    127c:	4c0c      	ldr	r4, [pc, #48]	; (12b0 <adc_sram_dmac_init+0x58>)
    127e:	2101      	movs	r1, #1
    1280:	4620      	mov	r0, r4
    1282:	4b0c      	ldr	r3, [pc, #48]	; (12b4 <adc_sram_dmac_init+0x5c>)
    1284:	4798      	blx	r3
	adc_sram_dma_resource[0].dma_cb.transfer_done = adc_sram_dma_callback;
    1286:	6823      	ldr	r3, [r4, #0]
    1288:	4a0b      	ldr	r2, [pc, #44]	; (12b8 <adc_sram_dmac_init+0x60>)
    128a:	601a      	str	r2, [r3, #0]
	_dma_enable_transaction(DMAC_CHANNEL_ADC_SRAM, false);
    128c:	2100      	movs	r1, #0
    128e:	2001      	movs	r0, #1
    1290:	4b0a      	ldr	r3, [pc, #40]	; (12bc <adc_sram_dmac_init+0x64>)
    1292:	4798      	blx	r3
    1294:	bd10      	pop	{r4, pc}
    1296:	bf00      	nop
    1298:	43002040 	.word	0x43002040
    129c:	00000dad 	.word	0x00000dad
    12a0:	20000228 	.word	0x20000228
    12a4:	00000d9d 	.word	0x00000d9d
    12a8:	00000dbd 	.word	0x00000dbd
    12ac:	00000d49 	.word	0x00000d49
    12b0:	20000680 	.word	0x20000680
    12b4:	00000e55 	.word	0x00000e55
    12b8:	00001211 	.word	0x00001211
    12bc:	00000e15 	.word	0x00000e15

000012c0 <main>:
}

int main(void)
{
    12c0:	b580      	push	{r7, lr}
	atmel_start_init();
    12c2:	4b1f      	ldr	r3, [pc, #124]	; (1340 <main+0x80>)
    12c4:	4798      	blx	r3
	timer_start(&TIMER_0);
    12c6:	481f      	ldr	r0, [pc, #124]	; (1344 <main+0x84>)
    12c8:	4b1f      	ldr	r3, [pc, #124]	; (1348 <main+0x88>)
    12ca:	4798      	blx	r3
	adc_sram_dmac_init();
    12cc:	4b1f      	ldr	r3, [pc, #124]	; (134c <main+0x8c>)
    12ce:	4798      	blx	r3
	adc_dmac_sequence_init();
    12d0:	4b1f      	ldr	r3, [pc, #124]	; (1350 <main+0x90>)
    12d2:	4798      	blx	r3
	printf("\r\n ADC DMA Sequencing example \r\n");
    12d4:	481f      	ldr	r0, [pc, #124]	; (1354 <main+0x94>)
    12d6:	4b20      	ldr	r3, [pc, #128]	; (1358 <main+0x98>)
    12d8:	4798      	blx	r3
	adc_sync_enable_channel(&ADC_1, 0);
    12da:	2100      	movs	r1, #0
    12dc:	481f      	ldr	r0, [pc, #124]	; (135c <main+0x9c>)
    12de:	4b20      	ldr	r3, [pc, #128]	; (1360 <main+0xa0>)
    12e0:	4798      	blx	r3
	((Adc *)hw)->DSEQCTRL.reg |= ADC_DSEQCTRL_INPUTCTRL;
    12e2:	4a20      	ldr	r2, [pc, #128]	; (1364 <main+0xa4>)
    12e4:	6b93      	ldr	r3, [r2, #56]	; 0x38
    12e6:	f043 0301 	orr.w	r3, r3, #1
    12ea:	6393      	str	r3, [r2, #56]	; 0x38
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12ec:	f240 73fc 	movw	r3, #2044	; 0x7fc
    12f0:	6b11      	ldr	r1, [r2, #48]	; 0x30
    12f2:	4219      	tst	r1, r3
    12f4:	d1fc      	bne.n	12f0 <main+0x30>
	hri_adc_set_DSEQCTRL_INPUTCTRL_bit(ADC1);

	while (1) {
		if (adc_dma_done) {
    12f6:	4c1c      	ldr	r4, [pc, #112]	; (1368 <main+0xa8>)
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    12f8:	4e1c      	ldr	r6, [pc, #112]	; (136c <main+0xac>)
			adc_dma_done = false;
			/* If ADC to SRAM transfer is complete, re enable the channels */
			hri_dmac_set_CHCTRLA_ENABLE_bit(DMAC, DMAC_CHANNEL_ADC_SEQ);
			hri_dmac_set_CHCTRLA_ENABLE_bit(DMAC, DMAC_CHANNEL_ADC_SRAM);
			printf("\r\n ADC conversion of 4 inputs done \r\n");
    12fa:	4f1d      	ldr	r7, [pc, #116]	; (1370 <main+0xb0>)
		if (adc_dma_done) {
    12fc:	7823      	ldrb	r3, [r4, #0]
    12fe:	2b00      	cmp	r3, #0
    1300:	d0fc      	beq.n	12fc <main+0x3c>
			adc_dma_done = false;
    1302:	2300      	movs	r3, #0
    1304:	7023      	strb	r3, [r4, #0]
    1306:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1308:	f043 0302 	orr.w	r3, r3, #2
    130c:	6433      	str	r3, [r6, #64]	; 0x40
    130e:	6d33      	ldr	r3, [r6, #80]	; 0x50
    1310:	f043 0302 	orr.w	r3, r3, #2
    1314:	6533      	str	r3, [r6, #80]	; 0x50
			printf("\r\n ADC conversion of 4 inputs done \r\n");
    1316:	4638      	mov	r0, r7
    1318:	4b0f      	ldr	r3, [pc, #60]	; (1358 <main+0x98>)
    131a:	4798      	blx	r3
			printf("AIN5: %04d\r\n", adc_res[0]);
    131c:	88a1      	ldrh	r1, [r4, #4]
    131e:	b289      	uxth	r1, r1
    1320:	4814      	ldr	r0, [pc, #80]	; (1374 <main+0xb4>)
    1322:	4d15      	ldr	r5, [pc, #84]	; (1378 <main+0xb8>)
    1324:	47a8      	blx	r5
			printf("AIN6: %04d\r\n", adc_res[1]);
    1326:	88e1      	ldrh	r1, [r4, #6]
    1328:	b289      	uxth	r1, r1
    132a:	4814      	ldr	r0, [pc, #80]	; (137c <main+0xbc>)
    132c:	47a8      	blx	r5
			printf("AIN7: %04d\r\n", adc_res[2]);
    132e:	8921      	ldrh	r1, [r4, #8]
    1330:	b289      	uxth	r1, r1
    1332:	4813      	ldr	r0, [pc, #76]	; (1380 <main+0xc0>)
    1334:	47a8      	blx	r5
			printf("AIN8: %04d\r\n", adc_res[3]);
    1336:	8961      	ldrh	r1, [r4, #10]
    1338:	b289      	uxth	r1, r1
    133a:	4812      	ldr	r0, [pc, #72]	; (1384 <main+0xc4>)
    133c:	47a8      	blx	r5
    133e:	e7dd      	b.n	12fc <main+0x3c>
    1340:	000002d1 	.word	0x000002d1
    1344:	2000024c 	.word	0x2000024c
    1348:	00000789 	.word	0x00000789
    134c:	00001259 	.word	0x00001259
    1350:	0000121d 	.word	0x0000121d
    1354:	000028ac 	.word	0x000028ac
    1358:	000015a1 	.word	0x000015a1
    135c:	20000248 	.word	0x20000248
    1360:	000005dd 	.word	0x000005dd
    1364:	43002000 	.word	0x43002000
    1368:	20000224 	.word	0x20000224
    136c:	4100a000 	.word	0x4100a000
    1370:	000028cc 	.word	0x000028cc
    1374:	000028f4 	.word	0x000028f4
    1378:	000014b9 	.word	0x000014b9
    137c:	00002904 	.word	0x00002904
    1380:	00002914 	.word	0x00002914
    1384:	00002924 	.word	0x00002924

00001388 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    1388:	b940      	cbnz	r0, 139c <_read+0x14>
{
    138a:	b508      	push	{r3, lr}
    138c:	460b      	mov	r3, r1
    138e:	4611      	mov	r1, r2
    1390:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1392:	4b04      	ldr	r3, [pc, #16]	; (13a4 <_read+0x1c>)
    1394:	4798      	blx	r3
    1396:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    139a:	bd08      	pop	{r3, pc}
		return -1;
    139c:	f04f 30ff 	mov.w	r0, #4294967295
    13a0:	4770      	bx	lr
    13a2:	bf00      	nop
    13a4:	000013f9 	.word	0x000013f9

000013a8 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    13a8:	3801      	subs	r0, #1
    13aa:	2802      	cmp	r0, #2
    13ac:	d808      	bhi.n	13c0 <_write+0x18>
{
    13ae:	b508      	push	{r3, lr}
    13b0:	460b      	mov	r3, r1
    13b2:	4611      	mov	r1, r2
    13b4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    13b6:	4b04      	ldr	r3, [pc, #16]	; (13c8 <_write+0x20>)
    13b8:	4798      	blx	r3
    13ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    13be:	bd08      	pop	{r3, pc}
		return -1;
    13c0:	f04f 30ff 	mov.w	r0, #4294967295
    13c4:	4770      	bx	lr
    13c6:	bf00      	nop
    13c8:	0000141d 	.word	0x0000141d

000013cc <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    13cc:	b570      	push	{r4, r5, r6, lr}
    13ce:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    13d0:	4d06      	ldr	r5, [pc, #24]	; (13ec <stdio_io_init+0x20>)
    13d2:	682b      	ldr	r3, [r5, #0]
    13d4:	2100      	movs	r1, #0
    13d6:	6898      	ldr	r0, [r3, #8]
    13d8:	4c05      	ldr	r4, [pc, #20]	; (13f0 <stdio_io_init+0x24>)
    13da:	47a0      	blx	r4
	setbuf(stdin, NULL);
    13dc:	682b      	ldr	r3, [r5, #0]
    13de:	2100      	movs	r1, #0
    13e0:	6858      	ldr	r0, [r3, #4]
    13e2:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    13e4:	4b03      	ldr	r3, [pc, #12]	; (13f4 <stdio_io_init+0x28>)
    13e6:	601e      	str	r6, [r3, #0]
    13e8:	bd70      	pop	{r4, r5, r6, pc}
    13ea:	bf00      	nop
    13ec:	20000010 	.word	0x20000010
    13f0:	000015b1 	.word	0x000015b1
    13f4:	20000230 	.word	0x20000230

000013f8 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    13f8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    13fa:	4b06      	ldr	r3, [pc, #24]	; (1414 <stdio_io_read+0x1c>)
    13fc:	681b      	ldr	r3, [r3, #0]
    13fe:	b133      	cbz	r3, 140e <stdio_io_read+0x16>
    1400:	460a      	mov	r2, r1
    1402:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1404:	b292      	uxth	r2, r2
    1406:	4618      	mov	r0, r3
    1408:	4b03      	ldr	r3, [pc, #12]	; (1418 <stdio_io_read+0x20>)
    140a:	4798      	blx	r3
    140c:	bd08      	pop	{r3, pc}
		return 0;
    140e:	2000      	movs	r0, #0
}
    1410:	bd08      	pop	{r3, pc}
    1412:	bf00      	nop
    1414:	20000230 	.word	0x20000230
    1418:	00000645 	.word	0x00000645

0000141c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    141c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    141e:	4b06      	ldr	r3, [pc, #24]	; (1438 <stdio_io_write+0x1c>)
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	b133      	cbz	r3, 1432 <stdio_io_write+0x16>
    1424:	460a      	mov	r2, r1
    1426:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1428:	b292      	uxth	r2, r2
    142a:	4618      	mov	r0, r3
    142c:	4b03      	ldr	r3, [pc, #12]	; (143c <stdio_io_write+0x20>)
    142e:	4798      	blx	r3
    1430:	bd08      	pop	{r3, pc}
		return 0;
    1432:	2000      	movs	r0, #0
}
    1434:	bd08      	pop	{r3, pc}
    1436:	bf00      	nop
    1438:	20000230 	.word	0x20000230
    143c:	00000615 	.word	0x00000615

00001440 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1440:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    1442:	4c04      	ldr	r4, [pc, #16]	; (1454 <stdio_redirect_init+0x14>)
    1444:	4620      	mov	r0, r4
    1446:	4b04      	ldr	r3, [pc, #16]	; (1458 <stdio_redirect_init+0x18>)
    1448:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    144a:	4620      	mov	r0, r4
    144c:	4b03      	ldr	r3, [pc, #12]	; (145c <stdio_redirect_init+0x1c>)
    144e:	4798      	blx	r3
    1450:	bd10      	pop	{r4, pc}
    1452:	bf00      	nop
    1454:	2000023c 	.word	0x2000023c
    1458:	000008e1 	.word	0x000008e1
    145c:	000013cd 	.word	0x000013cd

00001460 <__libc_init_array>:
    1460:	b570      	push	{r4, r5, r6, lr}
    1462:	4e0d      	ldr	r6, [pc, #52]	; (1498 <__libc_init_array+0x38>)
    1464:	4c0d      	ldr	r4, [pc, #52]	; (149c <__libc_init_array+0x3c>)
    1466:	1ba4      	subs	r4, r4, r6
    1468:	10a4      	asrs	r4, r4, #2
    146a:	2500      	movs	r5, #0
    146c:	42a5      	cmp	r5, r4
    146e:	d109      	bne.n	1484 <__libc_init_array+0x24>
    1470:	4e0b      	ldr	r6, [pc, #44]	; (14a0 <__libc_init_array+0x40>)
    1472:	4c0c      	ldr	r4, [pc, #48]	; (14a4 <__libc_init_array+0x44>)
    1474:	f001 faaa 	bl	29cc <_init>
    1478:	1ba4      	subs	r4, r4, r6
    147a:	10a4      	asrs	r4, r4, #2
    147c:	2500      	movs	r5, #0
    147e:	42a5      	cmp	r5, r4
    1480:	d105      	bne.n	148e <__libc_init_array+0x2e>
    1482:	bd70      	pop	{r4, r5, r6, pc}
    1484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1488:	4798      	blx	r3
    148a:	3501      	adds	r5, #1
    148c:	e7ee      	b.n	146c <__libc_init_array+0xc>
    148e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1492:	4798      	blx	r3
    1494:	3501      	adds	r5, #1
    1496:	e7f2      	b.n	147e <__libc_init_array+0x1e>
    1498:	000029d8 	.word	0x000029d8
    149c:	000029d8 	.word	0x000029d8
    14a0:	000029d8 	.word	0x000029d8
    14a4:	000029dc 	.word	0x000029dc

000014a8 <memset>:
    14a8:	4402      	add	r2, r0
    14aa:	4603      	mov	r3, r0
    14ac:	4293      	cmp	r3, r2
    14ae:	d100      	bne.n	14b2 <memset+0xa>
    14b0:	4770      	bx	lr
    14b2:	f803 1b01 	strb.w	r1, [r3], #1
    14b6:	e7f9      	b.n	14ac <memset+0x4>

000014b8 <iprintf>:
    14b8:	b40f      	push	{r0, r1, r2, r3}
    14ba:	4b0a      	ldr	r3, [pc, #40]	; (14e4 <iprintf+0x2c>)
    14bc:	b513      	push	{r0, r1, r4, lr}
    14be:	681c      	ldr	r4, [r3, #0]
    14c0:	b124      	cbz	r4, 14cc <iprintf+0x14>
    14c2:	69a3      	ldr	r3, [r4, #24]
    14c4:	b913      	cbnz	r3, 14cc <iprintf+0x14>
    14c6:	4620      	mov	r0, r4
    14c8:	f000 fada 	bl	1a80 <__sinit>
    14cc:	ab05      	add	r3, sp, #20
    14ce:	9a04      	ldr	r2, [sp, #16]
    14d0:	68a1      	ldr	r1, [r4, #8]
    14d2:	9301      	str	r3, [sp, #4]
    14d4:	4620      	mov	r0, r4
    14d6:	f000 fc9d 	bl	1e14 <_vfiprintf_r>
    14da:	b002      	add	sp, #8
    14dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    14e0:	b004      	add	sp, #16
    14e2:	4770      	bx	lr
    14e4:	20000010 	.word	0x20000010

000014e8 <_puts_r>:
    14e8:	b570      	push	{r4, r5, r6, lr}
    14ea:	460e      	mov	r6, r1
    14ec:	4605      	mov	r5, r0
    14ee:	b118      	cbz	r0, 14f8 <_puts_r+0x10>
    14f0:	6983      	ldr	r3, [r0, #24]
    14f2:	b90b      	cbnz	r3, 14f8 <_puts_r+0x10>
    14f4:	f000 fac4 	bl	1a80 <__sinit>
    14f8:	69ab      	ldr	r3, [r5, #24]
    14fa:	68ac      	ldr	r4, [r5, #8]
    14fc:	b913      	cbnz	r3, 1504 <_puts_r+0x1c>
    14fe:	4628      	mov	r0, r5
    1500:	f000 fabe 	bl	1a80 <__sinit>
    1504:	4b23      	ldr	r3, [pc, #140]	; (1594 <_puts_r+0xac>)
    1506:	429c      	cmp	r4, r3
    1508:	d117      	bne.n	153a <_puts_r+0x52>
    150a:	686c      	ldr	r4, [r5, #4]
    150c:	89a3      	ldrh	r3, [r4, #12]
    150e:	071b      	lsls	r3, r3, #28
    1510:	d51d      	bpl.n	154e <_puts_r+0x66>
    1512:	6923      	ldr	r3, [r4, #16]
    1514:	b1db      	cbz	r3, 154e <_puts_r+0x66>
    1516:	3e01      	subs	r6, #1
    1518:	68a3      	ldr	r3, [r4, #8]
    151a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    151e:	3b01      	subs	r3, #1
    1520:	60a3      	str	r3, [r4, #8]
    1522:	b9e9      	cbnz	r1, 1560 <_puts_r+0x78>
    1524:	2b00      	cmp	r3, #0
    1526:	da2e      	bge.n	1586 <_puts_r+0x9e>
    1528:	4622      	mov	r2, r4
    152a:	210a      	movs	r1, #10
    152c:	4628      	mov	r0, r5
    152e:	f000 f8f5 	bl	171c <__swbuf_r>
    1532:	3001      	adds	r0, #1
    1534:	d011      	beq.n	155a <_puts_r+0x72>
    1536:	200a      	movs	r0, #10
    1538:	bd70      	pop	{r4, r5, r6, pc}
    153a:	4b17      	ldr	r3, [pc, #92]	; (1598 <_puts_r+0xb0>)
    153c:	429c      	cmp	r4, r3
    153e:	d101      	bne.n	1544 <_puts_r+0x5c>
    1540:	68ac      	ldr	r4, [r5, #8]
    1542:	e7e3      	b.n	150c <_puts_r+0x24>
    1544:	4b15      	ldr	r3, [pc, #84]	; (159c <_puts_r+0xb4>)
    1546:	429c      	cmp	r4, r3
    1548:	bf08      	it	eq
    154a:	68ec      	ldreq	r4, [r5, #12]
    154c:	e7de      	b.n	150c <_puts_r+0x24>
    154e:	4621      	mov	r1, r4
    1550:	4628      	mov	r0, r5
    1552:	f000 f935 	bl	17c0 <__swsetup_r>
    1556:	2800      	cmp	r0, #0
    1558:	d0dd      	beq.n	1516 <_puts_r+0x2e>
    155a:	f04f 30ff 	mov.w	r0, #4294967295
    155e:	bd70      	pop	{r4, r5, r6, pc}
    1560:	2b00      	cmp	r3, #0
    1562:	da04      	bge.n	156e <_puts_r+0x86>
    1564:	69a2      	ldr	r2, [r4, #24]
    1566:	4293      	cmp	r3, r2
    1568:	db06      	blt.n	1578 <_puts_r+0x90>
    156a:	290a      	cmp	r1, #10
    156c:	d004      	beq.n	1578 <_puts_r+0x90>
    156e:	6823      	ldr	r3, [r4, #0]
    1570:	1c5a      	adds	r2, r3, #1
    1572:	6022      	str	r2, [r4, #0]
    1574:	7019      	strb	r1, [r3, #0]
    1576:	e7cf      	b.n	1518 <_puts_r+0x30>
    1578:	4622      	mov	r2, r4
    157a:	4628      	mov	r0, r5
    157c:	f000 f8ce 	bl	171c <__swbuf_r>
    1580:	3001      	adds	r0, #1
    1582:	d1c9      	bne.n	1518 <_puts_r+0x30>
    1584:	e7e9      	b.n	155a <_puts_r+0x72>
    1586:	6823      	ldr	r3, [r4, #0]
    1588:	200a      	movs	r0, #10
    158a:	1c5a      	adds	r2, r3, #1
    158c:	6022      	str	r2, [r4, #0]
    158e:	7018      	strb	r0, [r3, #0]
    1590:	bd70      	pop	{r4, r5, r6, pc}
    1592:	bf00      	nop
    1594:	00002958 	.word	0x00002958
    1598:	00002978 	.word	0x00002978
    159c:	00002938 	.word	0x00002938

000015a0 <puts>:
    15a0:	4b02      	ldr	r3, [pc, #8]	; (15ac <puts+0xc>)
    15a2:	4601      	mov	r1, r0
    15a4:	6818      	ldr	r0, [r3, #0]
    15a6:	f7ff bf9f 	b.w	14e8 <_puts_r>
    15aa:	bf00      	nop
    15ac:	20000010 	.word	0x20000010

000015b0 <setbuf>:
    15b0:	2900      	cmp	r1, #0
    15b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    15b6:	bf0c      	ite	eq
    15b8:	2202      	moveq	r2, #2
    15ba:	2200      	movne	r2, #0
    15bc:	f000 b800 	b.w	15c0 <setvbuf>

000015c0 <setvbuf>:
    15c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    15c4:	461d      	mov	r5, r3
    15c6:	4b51      	ldr	r3, [pc, #324]	; (170c <setvbuf+0x14c>)
    15c8:	681e      	ldr	r6, [r3, #0]
    15ca:	4604      	mov	r4, r0
    15cc:	460f      	mov	r7, r1
    15ce:	4690      	mov	r8, r2
    15d0:	b126      	cbz	r6, 15dc <setvbuf+0x1c>
    15d2:	69b3      	ldr	r3, [r6, #24]
    15d4:	b913      	cbnz	r3, 15dc <setvbuf+0x1c>
    15d6:	4630      	mov	r0, r6
    15d8:	f000 fa52 	bl	1a80 <__sinit>
    15dc:	4b4c      	ldr	r3, [pc, #304]	; (1710 <setvbuf+0x150>)
    15de:	429c      	cmp	r4, r3
    15e0:	d152      	bne.n	1688 <setvbuf+0xc8>
    15e2:	6874      	ldr	r4, [r6, #4]
    15e4:	f1b8 0f02 	cmp.w	r8, #2
    15e8:	d006      	beq.n	15f8 <setvbuf+0x38>
    15ea:	f1b8 0f01 	cmp.w	r8, #1
    15ee:	f200 8089 	bhi.w	1704 <setvbuf+0x144>
    15f2:	2d00      	cmp	r5, #0
    15f4:	f2c0 8086 	blt.w	1704 <setvbuf+0x144>
    15f8:	4621      	mov	r1, r4
    15fa:	4630      	mov	r0, r6
    15fc:	f000 f9d6 	bl	19ac <_fflush_r>
    1600:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1602:	b141      	cbz	r1, 1616 <setvbuf+0x56>
    1604:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1608:	4299      	cmp	r1, r3
    160a:	d002      	beq.n	1612 <setvbuf+0x52>
    160c:	4630      	mov	r0, r6
    160e:	f000 fb2d 	bl	1c6c <_free_r>
    1612:	2300      	movs	r3, #0
    1614:	6363      	str	r3, [r4, #52]	; 0x34
    1616:	2300      	movs	r3, #0
    1618:	61a3      	str	r3, [r4, #24]
    161a:	6063      	str	r3, [r4, #4]
    161c:	89a3      	ldrh	r3, [r4, #12]
    161e:	061b      	lsls	r3, r3, #24
    1620:	d503      	bpl.n	162a <setvbuf+0x6a>
    1622:	6921      	ldr	r1, [r4, #16]
    1624:	4630      	mov	r0, r6
    1626:	f000 fb21 	bl	1c6c <_free_r>
    162a:	89a3      	ldrh	r3, [r4, #12]
    162c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    1630:	f023 0303 	bic.w	r3, r3, #3
    1634:	f1b8 0f02 	cmp.w	r8, #2
    1638:	81a3      	strh	r3, [r4, #12]
    163a:	d05d      	beq.n	16f8 <setvbuf+0x138>
    163c:	ab01      	add	r3, sp, #4
    163e:	466a      	mov	r2, sp
    1640:	4621      	mov	r1, r4
    1642:	4630      	mov	r0, r6
    1644:	f000 faa6 	bl	1b94 <__swhatbuf_r>
    1648:	89a3      	ldrh	r3, [r4, #12]
    164a:	4318      	orrs	r0, r3
    164c:	81a0      	strh	r0, [r4, #12]
    164e:	bb2d      	cbnz	r5, 169c <setvbuf+0xdc>
    1650:	9d00      	ldr	r5, [sp, #0]
    1652:	4628      	mov	r0, r5
    1654:	f000 fb02 	bl	1c5c <malloc>
    1658:	4607      	mov	r7, r0
    165a:	2800      	cmp	r0, #0
    165c:	d14e      	bne.n	16fc <setvbuf+0x13c>
    165e:	f8dd 9000 	ldr.w	r9, [sp]
    1662:	45a9      	cmp	r9, r5
    1664:	d13c      	bne.n	16e0 <setvbuf+0x120>
    1666:	f04f 30ff 	mov.w	r0, #4294967295
    166a:	89a3      	ldrh	r3, [r4, #12]
    166c:	f043 0302 	orr.w	r3, r3, #2
    1670:	81a3      	strh	r3, [r4, #12]
    1672:	2300      	movs	r3, #0
    1674:	60a3      	str	r3, [r4, #8]
    1676:	f104 0347 	add.w	r3, r4, #71	; 0x47
    167a:	6023      	str	r3, [r4, #0]
    167c:	6123      	str	r3, [r4, #16]
    167e:	2301      	movs	r3, #1
    1680:	6163      	str	r3, [r4, #20]
    1682:	b003      	add	sp, #12
    1684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1688:	4b22      	ldr	r3, [pc, #136]	; (1714 <setvbuf+0x154>)
    168a:	429c      	cmp	r4, r3
    168c:	d101      	bne.n	1692 <setvbuf+0xd2>
    168e:	68b4      	ldr	r4, [r6, #8]
    1690:	e7a8      	b.n	15e4 <setvbuf+0x24>
    1692:	4b21      	ldr	r3, [pc, #132]	; (1718 <setvbuf+0x158>)
    1694:	429c      	cmp	r4, r3
    1696:	bf08      	it	eq
    1698:	68f4      	ldreq	r4, [r6, #12]
    169a:	e7a3      	b.n	15e4 <setvbuf+0x24>
    169c:	2f00      	cmp	r7, #0
    169e:	d0d8      	beq.n	1652 <setvbuf+0x92>
    16a0:	69b3      	ldr	r3, [r6, #24]
    16a2:	b913      	cbnz	r3, 16aa <setvbuf+0xea>
    16a4:	4630      	mov	r0, r6
    16a6:	f000 f9eb 	bl	1a80 <__sinit>
    16aa:	f1b8 0f01 	cmp.w	r8, #1
    16ae:	bf08      	it	eq
    16b0:	89a3      	ldrheq	r3, [r4, #12]
    16b2:	6027      	str	r7, [r4, #0]
    16b4:	bf04      	itt	eq
    16b6:	f043 0301 	orreq.w	r3, r3, #1
    16ba:	81a3      	strheq	r3, [r4, #12]
    16bc:	89a3      	ldrh	r3, [r4, #12]
    16be:	6127      	str	r7, [r4, #16]
    16c0:	f013 0008 	ands.w	r0, r3, #8
    16c4:	6165      	str	r5, [r4, #20]
    16c6:	d01b      	beq.n	1700 <setvbuf+0x140>
    16c8:	f013 0001 	ands.w	r0, r3, #1
    16cc:	bf18      	it	ne
    16ce:	426d      	negne	r5, r5
    16d0:	f04f 0300 	mov.w	r3, #0
    16d4:	bf1d      	ittte	ne
    16d6:	60a3      	strne	r3, [r4, #8]
    16d8:	61a5      	strne	r5, [r4, #24]
    16da:	4618      	movne	r0, r3
    16dc:	60a5      	streq	r5, [r4, #8]
    16de:	e7d0      	b.n	1682 <setvbuf+0xc2>
    16e0:	4648      	mov	r0, r9
    16e2:	f000 fabb 	bl	1c5c <malloc>
    16e6:	4607      	mov	r7, r0
    16e8:	2800      	cmp	r0, #0
    16ea:	d0bc      	beq.n	1666 <setvbuf+0xa6>
    16ec:	89a3      	ldrh	r3, [r4, #12]
    16ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    16f2:	81a3      	strh	r3, [r4, #12]
    16f4:	464d      	mov	r5, r9
    16f6:	e7d3      	b.n	16a0 <setvbuf+0xe0>
    16f8:	2000      	movs	r0, #0
    16fa:	e7b6      	b.n	166a <setvbuf+0xaa>
    16fc:	46a9      	mov	r9, r5
    16fe:	e7f5      	b.n	16ec <setvbuf+0x12c>
    1700:	60a0      	str	r0, [r4, #8]
    1702:	e7be      	b.n	1682 <setvbuf+0xc2>
    1704:	f04f 30ff 	mov.w	r0, #4294967295
    1708:	e7bb      	b.n	1682 <setvbuf+0xc2>
    170a:	bf00      	nop
    170c:	20000010 	.word	0x20000010
    1710:	00002958 	.word	0x00002958
    1714:	00002978 	.word	0x00002978
    1718:	00002938 	.word	0x00002938

0000171c <__swbuf_r>:
    171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    171e:	460e      	mov	r6, r1
    1720:	4614      	mov	r4, r2
    1722:	4605      	mov	r5, r0
    1724:	b118      	cbz	r0, 172e <__swbuf_r+0x12>
    1726:	6983      	ldr	r3, [r0, #24]
    1728:	b90b      	cbnz	r3, 172e <__swbuf_r+0x12>
    172a:	f000 f9a9 	bl	1a80 <__sinit>
    172e:	4b21      	ldr	r3, [pc, #132]	; (17b4 <__swbuf_r+0x98>)
    1730:	429c      	cmp	r4, r3
    1732:	d12a      	bne.n	178a <__swbuf_r+0x6e>
    1734:	686c      	ldr	r4, [r5, #4]
    1736:	69a3      	ldr	r3, [r4, #24]
    1738:	60a3      	str	r3, [r4, #8]
    173a:	89a3      	ldrh	r3, [r4, #12]
    173c:	071a      	lsls	r2, r3, #28
    173e:	d52e      	bpl.n	179e <__swbuf_r+0x82>
    1740:	6923      	ldr	r3, [r4, #16]
    1742:	b363      	cbz	r3, 179e <__swbuf_r+0x82>
    1744:	6923      	ldr	r3, [r4, #16]
    1746:	6820      	ldr	r0, [r4, #0]
    1748:	1ac0      	subs	r0, r0, r3
    174a:	6963      	ldr	r3, [r4, #20]
    174c:	b2f6      	uxtb	r6, r6
    174e:	4298      	cmp	r0, r3
    1750:	4637      	mov	r7, r6
    1752:	db04      	blt.n	175e <__swbuf_r+0x42>
    1754:	4621      	mov	r1, r4
    1756:	4628      	mov	r0, r5
    1758:	f000 f928 	bl	19ac <_fflush_r>
    175c:	bb28      	cbnz	r0, 17aa <__swbuf_r+0x8e>
    175e:	68a3      	ldr	r3, [r4, #8]
    1760:	3b01      	subs	r3, #1
    1762:	60a3      	str	r3, [r4, #8]
    1764:	6823      	ldr	r3, [r4, #0]
    1766:	1c5a      	adds	r2, r3, #1
    1768:	6022      	str	r2, [r4, #0]
    176a:	701e      	strb	r6, [r3, #0]
    176c:	6963      	ldr	r3, [r4, #20]
    176e:	3001      	adds	r0, #1
    1770:	4298      	cmp	r0, r3
    1772:	d004      	beq.n	177e <__swbuf_r+0x62>
    1774:	89a3      	ldrh	r3, [r4, #12]
    1776:	07db      	lsls	r3, r3, #31
    1778:	d519      	bpl.n	17ae <__swbuf_r+0x92>
    177a:	2e0a      	cmp	r6, #10
    177c:	d117      	bne.n	17ae <__swbuf_r+0x92>
    177e:	4621      	mov	r1, r4
    1780:	4628      	mov	r0, r5
    1782:	f000 f913 	bl	19ac <_fflush_r>
    1786:	b190      	cbz	r0, 17ae <__swbuf_r+0x92>
    1788:	e00f      	b.n	17aa <__swbuf_r+0x8e>
    178a:	4b0b      	ldr	r3, [pc, #44]	; (17b8 <__swbuf_r+0x9c>)
    178c:	429c      	cmp	r4, r3
    178e:	d101      	bne.n	1794 <__swbuf_r+0x78>
    1790:	68ac      	ldr	r4, [r5, #8]
    1792:	e7d0      	b.n	1736 <__swbuf_r+0x1a>
    1794:	4b09      	ldr	r3, [pc, #36]	; (17bc <__swbuf_r+0xa0>)
    1796:	429c      	cmp	r4, r3
    1798:	bf08      	it	eq
    179a:	68ec      	ldreq	r4, [r5, #12]
    179c:	e7cb      	b.n	1736 <__swbuf_r+0x1a>
    179e:	4621      	mov	r1, r4
    17a0:	4628      	mov	r0, r5
    17a2:	f000 f80d 	bl	17c0 <__swsetup_r>
    17a6:	2800      	cmp	r0, #0
    17a8:	d0cc      	beq.n	1744 <__swbuf_r+0x28>
    17aa:	f04f 37ff 	mov.w	r7, #4294967295
    17ae:	4638      	mov	r0, r7
    17b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17b2:	bf00      	nop
    17b4:	00002958 	.word	0x00002958
    17b8:	00002978 	.word	0x00002978
    17bc:	00002938 	.word	0x00002938

000017c0 <__swsetup_r>:
    17c0:	4b32      	ldr	r3, [pc, #200]	; (188c <__swsetup_r+0xcc>)
    17c2:	b570      	push	{r4, r5, r6, lr}
    17c4:	681d      	ldr	r5, [r3, #0]
    17c6:	4606      	mov	r6, r0
    17c8:	460c      	mov	r4, r1
    17ca:	b125      	cbz	r5, 17d6 <__swsetup_r+0x16>
    17cc:	69ab      	ldr	r3, [r5, #24]
    17ce:	b913      	cbnz	r3, 17d6 <__swsetup_r+0x16>
    17d0:	4628      	mov	r0, r5
    17d2:	f000 f955 	bl	1a80 <__sinit>
    17d6:	4b2e      	ldr	r3, [pc, #184]	; (1890 <__swsetup_r+0xd0>)
    17d8:	429c      	cmp	r4, r3
    17da:	d10f      	bne.n	17fc <__swsetup_r+0x3c>
    17dc:	686c      	ldr	r4, [r5, #4]
    17de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    17e2:	b29a      	uxth	r2, r3
    17e4:	0715      	lsls	r5, r2, #28
    17e6:	d42c      	bmi.n	1842 <__swsetup_r+0x82>
    17e8:	06d0      	lsls	r0, r2, #27
    17ea:	d411      	bmi.n	1810 <__swsetup_r+0x50>
    17ec:	2209      	movs	r2, #9
    17ee:	6032      	str	r2, [r6, #0]
    17f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    17f4:	81a3      	strh	r3, [r4, #12]
    17f6:	f04f 30ff 	mov.w	r0, #4294967295
    17fa:	bd70      	pop	{r4, r5, r6, pc}
    17fc:	4b25      	ldr	r3, [pc, #148]	; (1894 <__swsetup_r+0xd4>)
    17fe:	429c      	cmp	r4, r3
    1800:	d101      	bne.n	1806 <__swsetup_r+0x46>
    1802:	68ac      	ldr	r4, [r5, #8]
    1804:	e7eb      	b.n	17de <__swsetup_r+0x1e>
    1806:	4b24      	ldr	r3, [pc, #144]	; (1898 <__swsetup_r+0xd8>)
    1808:	429c      	cmp	r4, r3
    180a:	bf08      	it	eq
    180c:	68ec      	ldreq	r4, [r5, #12]
    180e:	e7e6      	b.n	17de <__swsetup_r+0x1e>
    1810:	0751      	lsls	r1, r2, #29
    1812:	d512      	bpl.n	183a <__swsetup_r+0x7a>
    1814:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1816:	b141      	cbz	r1, 182a <__swsetup_r+0x6a>
    1818:	f104 0344 	add.w	r3, r4, #68	; 0x44
    181c:	4299      	cmp	r1, r3
    181e:	d002      	beq.n	1826 <__swsetup_r+0x66>
    1820:	4630      	mov	r0, r6
    1822:	f000 fa23 	bl	1c6c <_free_r>
    1826:	2300      	movs	r3, #0
    1828:	6363      	str	r3, [r4, #52]	; 0x34
    182a:	89a3      	ldrh	r3, [r4, #12]
    182c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1830:	81a3      	strh	r3, [r4, #12]
    1832:	2300      	movs	r3, #0
    1834:	6063      	str	r3, [r4, #4]
    1836:	6923      	ldr	r3, [r4, #16]
    1838:	6023      	str	r3, [r4, #0]
    183a:	89a3      	ldrh	r3, [r4, #12]
    183c:	f043 0308 	orr.w	r3, r3, #8
    1840:	81a3      	strh	r3, [r4, #12]
    1842:	6923      	ldr	r3, [r4, #16]
    1844:	b94b      	cbnz	r3, 185a <__swsetup_r+0x9a>
    1846:	89a3      	ldrh	r3, [r4, #12]
    1848:	f403 7320 	and.w	r3, r3, #640	; 0x280
    184c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1850:	d003      	beq.n	185a <__swsetup_r+0x9a>
    1852:	4621      	mov	r1, r4
    1854:	4630      	mov	r0, r6
    1856:	f000 f9c1 	bl	1bdc <__smakebuf_r>
    185a:	89a2      	ldrh	r2, [r4, #12]
    185c:	f012 0301 	ands.w	r3, r2, #1
    1860:	d00c      	beq.n	187c <__swsetup_r+0xbc>
    1862:	2300      	movs	r3, #0
    1864:	60a3      	str	r3, [r4, #8]
    1866:	6963      	ldr	r3, [r4, #20]
    1868:	425b      	negs	r3, r3
    186a:	61a3      	str	r3, [r4, #24]
    186c:	6923      	ldr	r3, [r4, #16]
    186e:	b953      	cbnz	r3, 1886 <__swsetup_r+0xc6>
    1870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1874:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1878:	d1ba      	bne.n	17f0 <__swsetup_r+0x30>
    187a:	bd70      	pop	{r4, r5, r6, pc}
    187c:	0792      	lsls	r2, r2, #30
    187e:	bf58      	it	pl
    1880:	6963      	ldrpl	r3, [r4, #20]
    1882:	60a3      	str	r3, [r4, #8]
    1884:	e7f2      	b.n	186c <__swsetup_r+0xac>
    1886:	2000      	movs	r0, #0
    1888:	e7f7      	b.n	187a <__swsetup_r+0xba>
    188a:	bf00      	nop
    188c:	20000010 	.word	0x20000010
    1890:	00002958 	.word	0x00002958
    1894:	00002978 	.word	0x00002978
    1898:	00002938 	.word	0x00002938

0000189c <__sflush_r>:
    189c:	898a      	ldrh	r2, [r1, #12]
    189e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18a2:	4605      	mov	r5, r0
    18a4:	0710      	lsls	r0, r2, #28
    18a6:	460c      	mov	r4, r1
    18a8:	d45a      	bmi.n	1960 <__sflush_r+0xc4>
    18aa:	684b      	ldr	r3, [r1, #4]
    18ac:	2b00      	cmp	r3, #0
    18ae:	dc05      	bgt.n	18bc <__sflush_r+0x20>
    18b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    18b2:	2b00      	cmp	r3, #0
    18b4:	dc02      	bgt.n	18bc <__sflush_r+0x20>
    18b6:	2000      	movs	r0, #0
    18b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    18be:	2e00      	cmp	r6, #0
    18c0:	d0f9      	beq.n	18b6 <__sflush_r+0x1a>
    18c2:	2300      	movs	r3, #0
    18c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    18c8:	682f      	ldr	r7, [r5, #0]
    18ca:	602b      	str	r3, [r5, #0]
    18cc:	d033      	beq.n	1936 <__sflush_r+0x9a>
    18ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
    18d0:	89a3      	ldrh	r3, [r4, #12]
    18d2:	075a      	lsls	r2, r3, #29
    18d4:	d505      	bpl.n	18e2 <__sflush_r+0x46>
    18d6:	6863      	ldr	r3, [r4, #4]
    18d8:	1ac0      	subs	r0, r0, r3
    18da:	6b63      	ldr	r3, [r4, #52]	; 0x34
    18dc:	b10b      	cbz	r3, 18e2 <__sflush_r+0x46>
    18de:	6c23      	ldr	r3, [r4, #64]	; 0x40
    18e0:	1ac0      	subs	r0, r0, r3
    18e2:	2300      	movs	r3, #0
    18e4:	4602      	mov	r2, r0
    18e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    18e8:	6a21      	ldr	r1, [r4, #32]
    18ea:	4628      	mov	r0, r5
    18ec:	47b0      	blx	r6
    18ee:	1c43      	adds	r3, r0, #1
    18f0:	89a3      	ldrh	r3, [r4, #12]
    18f2:	d106      	bne.n	1902 <__sflush_r+0x66>
    18f4:	6829      	ldr	r1, [r5, #0]
    18f6:	291d      	cmp	r1, #29
    18f8:	d84b      	bhi.n	1992 <__sflush_r+0xf6>
    18fa:	4a2b      	ldr	r2, [pc, #172]	; (19a8 <__sflush_r+0x10c>)
    18fc:	40ca      	lsrs	r2, r1
    18fe:	07d6      	lsls	r6, r2, #31
    1900:	d547      	bpl.n	1992 <__sflush_r+0xf6>
    1902:	2200      	movs	r2, #0
    1904:	6062      	str	r2, [r4, #4]
    1906:	04d9      	lsls	r1, r3, #19
    1908:	6922      	ldr	r2, [r4, #16]
    190a:	6022      	str	r2, [r4, #0]
    190c:	d504      	bpl.n	1918 <__sflush_r+0x7c>
    190e:	1c42      	adds	r2, r0, #1
    1910:	d101      	bne.n	1916 <__sflush_r+0x7a>
    1912:	682b      	ldr	r3, [r5, #0]
    1914:	b903      	cbnz	r3, 1918 <__sflush_r+0x7c>
    1916:	6560      	str	r0, [r4, #84]	; 0x54
    1918:	6b61      	ldr	r1, [r4, #52]	; 0x34
    191a:	602f      	str	r7, [r5, #0]
    191c:	2900      	cmp	r1, #0
    191e:	d0ca      	beq.n	18b6 <__sflush_r+0x1a>
    1920:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1924:	4299      	cmp	r1, r3
    1926:	d002      	beq.n	192e <__sflush_r+0x92>
    1928:	4628      	mov	r0, r5
    192a:	f000 f99f 	bl	1c6c <_free_r>
    192e:	2000      	movs	r0, #0
    1930:	6360      	str	r0, [r4, #52]	; 0x34
    1932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1936:	6a21      	ldr	r1, [r4, #32]
    1938:	2301      	movs	r3, #1
    193a:	4628      	mov	r0, r5
    193c:	47b0      	blx	r6
    193e:	1c41      	adds	r1, r0, #1
    1940:	d1c6      	bne.n	18d0 <__sflush_r+0x34>
    1942:	682b      	ldr	r3, [r5, #0]
    1944:	2b00      	cmp	r3, #0
    1946:	d0c3      	beq.n	18d0 <__sflush_r+0x34>
    1948:	2b1d      	cmp	r3, #29
    194a:	d001      	beq.n	1950 <__sflush_r+0xb4>
    194c:	2b16      	cmp	r3, #22
    194e:	d101      	bne.n	1954 <__sflush_r+0xb8>
    1950:	602f      	str	r7, [r5, #0]
    1952:	e7b0      	b.n	18b6 <__sflush_r+0x1a>
    1954:	89a3      	ldrh	r3, [r4, #12]
    1956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    195a:	81a3      	strh	r3, [r4, #12]
    195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1960:	690f      	ldr	r7, [r1, #16]
    1962:	2f00      	cmp	r7, #0
    1964:	d0a7      	beq.n	18b6 <__sflush_r+0x1a>
    1966:	0793      	lsls	r3, r2, #30
    1968:	680e      	ldr	r6, [r1, #0]
    196a:	bf08      	it	eq
    196c:	694b      	ldreq	r3, [r1, #20]
    196e:	600f      	str	r7, [r1, #0]
    1970:	bf18      	it	ne
    1972:	2300      	movne	r3, #0
    1974:	eba6 0807 	sub.w	r8, r6, r7
    1978:	608b      	str	r3, [r1, #8]
    197a:	f1b8 0f00 	cmp.w	r8, #0
    197e:	dd9a      	ble.n	18b6 <__sflush_r+0x1a>
    1980:	4643      	mov	r3, r8
    1982:	463a      	mov	r2, r7
    1984:	6a21      	ldr	r1, [r4, #32]
    1986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1988:	4628      	mov	r0, r5
    198a:	47b0      	blx	r6
    198c:	2800      	cmp	r0, #0
    198e:	dc07      	bgt.n	19a0 <__sflush_r+0x104>
    1990:	89a3      	ldrh	r3, [r4, #12]
    1992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1996:	81a3      	strh	r3, [r4, #12]
    1998:	f04f 30ff 	mov.w	r0, #4294967295
    199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19a0:	4407      	add	r7, r0
    19a2:	eba8 0800 	sub.w	r8, r8, r0
    19a6:	e7e8      	b.n	197a <__sflush_r+0xde>
    19a8:	20400001 	.word	0x20400001

000019ac <_fflush_r>:
    19ac:	b538      	push	{r3, r4, r5, lr}
    19ae:	690b      	ldr	r3, [r1, #16]
    19b0:	4605      	mov	r5, r0
    19b2:	460c      	mov	r4, r1
    19b4:	b1db      	cbz	r3, 19ee <_fflush_r+0x42>
    19b6:	b118      	cbz	r0, 19c0 <_fflush_r+0x14>
    19b8:	6983      	ldr	r3, [r0, #24]
    19ba:	b90b      	cbnz	r3, 19c0 <_fflush_r+0x14>
    19bc:	f000 f860 	bl	1a80 <__sinit>
    19c0:	4b0c      	ldr	r3, [pc, #48]	; (19f4 <_fflush_r+0x48>)
    19c2:	429c      	cmp	r4, r3
    19c4:	d109      	bne.n	19da <_fflush_r+0x2e>
    19c6:	686c      	ldr	r4, [r5, #4]
    19c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    19cc:	b17b      	cbz	r3, 19ee <_fflush_r+0x42>
    19ce:	4621      	mov	r1, r4
    19d0:	4628      	mov	r0, r5
    19d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    19d6:	f7ff bf61 	b.w	189c <__sflush_r>
    19da:	4b07      	ldr	r3, [pc, #28]	; (19f8 <_fflush_r+0x4c>)
    19dc:	429c      	cmp	r4, r3
    19de:	d101      	bne.n	19e4 <_fflush_r+0x38>
    19e0:	68ac      	ldr	r4, [r5, #8]
    19e2:	e7f1      	b.n	19c8 <_fflush_r+0x1c>
    19e4:	4b05      	ldr	r3, [pc, #20]	; (19fc <_fflush_r+0x50>)
    19e6:	429c      	cmp	r4, r3
    19e8:	bf08      	it	eq
    19ea:	68ec      	ldreq	r4, [r5, #12]
    19ec:	e7ec      	b.n	19c8 <_fflush_r+0x1c>
    19ee:	2000      	movs	r0, #0
    19f0:	bd38      	pop	{r3, r4, r5, pc}
    19f2:	bf00      	nop
    19f4:	00002958 	.word	0x00002958
    19f8:	00002978 	.word	0x00002978
    19fc:	00002938 	.word	0x00002938

00001a00 <_cleanup_r>:
    1a00:	4901      	ldr	r1, [pc, #4]	; (1a08 <_cleanup_r+0x8>)
    1a02:	f000 b8a9 	b.w	1b58 <_fwalk_reent>
    1a06:	bf00      	nop
    1a08:	000019ad 	.word	0x000019ad

00001a0c <std.isra.0>:
    1a0c:	2300      	movs	r3, #0
    1a0e:	b510      	push	{r4, lr}
    1a10:	4604      	mov	r4, r0
    1a12:	6003      	str	r3, [r0, #0]
    1a14:	6043      	str	r3, [r0, #4]
    1a16:	6083      	str	r3, [r0, #8]
    1a18:	8181      	strh	r1, [r0, #12]
    1a1a:	6643      	str	r3, [r0, #100]	; 0x64
    1a1c:	81c2      	strh	r2, [r0, #14]
    1a1e:	6103      	str	r3, [r0, #16]
    1a20:	6143      	str	r3, [r0, #20]
    1a22:	6183      	str	r3, [r0, #24]
    1a24:	4619      	mov	r1, r3
    1a26:	2208      	movs	r2, #8
    1a28:	305c      	adds	r0, #92	; 0x5c
    1a2a:	f7ff fd3d 	bl	14a8 <memset>
    1a2e:	4b05      	ldr	r3, [pc, #20]	; (1a44 <std.isra.0+0x38>)
    1a30:	6263      	str	r3, [r4, #36]	; 0x24
    1a32:	4b05      	ldr	r3, [pc, #20]	; (1a48 <std.isra.0+0x3c>)
    1a34:	62a3      	str	r3, [r4, #40]	; 0x28
    1a36:	4b05      	ldr	r3, [pc, #20]	; (1a4c <std.isra.0+0x40>)
    1a38:	62e3      	str	r3, [r4, #44]	; 0x2c
    1a3a:	4b05      	ldr	r3, [pc, #20]	; (1a50 <std.isra.0+0x44>)
    1a3c:	6224      	str	r4, [r4, #32]
    1a3e:	6323      	str	r3, [r4, #48]	; 0x30
    1a40:	bd10      	pop	{r4, pc}
    1a42:	bf00      	nop
    1a44:	0000238d 	.word	0x0000238d
    1a48:	000023af 	.word	0x000023af
    1a4c:	000023e7 	.word	0x000023e7
    1a50:	0000240b 	.word	0x0000240b

00001a54 <__sfmoreglue>:
    1a54:	b570      	push	{r4, r5, r6, lr}
    1a56:	1e4a      	subs	r2, r1, #1
    1a58:	2568      	movs	r5, #104	; 0x68
    1a5a:	4355      	muls	r5, r2
    1a5c:	460e      	mov	r6, r1
    1a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1a62:	f000 f951 	bl	1d08 <_malloc_r>
    1a66:	4604      	mov	r4, r0
    1a68:	b140      	cbz	r0, 1a7c <__sfmoreglue+0x28>
    1a6a:	2100      	movs	r1, #0
    1a6c:	e880 0042 	stmia.w	r0, {r1, r6}
    1a70:	300c      	adds	r0, #12
    1a72:	60a0      	str	r0, [r4, #8]
    1a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1a78:	f7ff fd16 	bl	14a8 <memset>
    1a7c:	4620      	mov	r0, r4
    1a7e:	bd70      	pop	{r4, r5, r6, pc}

00001a80 <__sinit>:
    1a80:	6983      	ldr	r3, [r0, #24]
    1a82:	b510      	push	{r4, lr}
    1a84:	4604      	mov	r4, r0
    1a86:	bb33      	cbnz	r3, 1ad6 <__sinit+0x56>
    1a88:	6483      	str	r3, [r0, #72]	; 0x48
    1a8a:	64c3      	str	r3, [r0, #76]	; 0x4c
    1a8c:	6503      	str	r3, [r0, #80]	; 0x50
    1a8e:	4b12      	ldr	r3, [pc, #72]	; (1ad8 <__sinit+0x58>)
    1a90:	4a12      	ldr	r2, [pc, #72]	; (1adc <__sinit+0x5c>)
    1a92:	681b      	ldr	r3, [r3, #0]
    1a94:	6282      	str	r2, [r0, #40]	; 0x28
    1a96:	4298      	cmp	r0, r3
    1a98:	bf04      	itt	eq
    1a9a:	2301      	moveq	r3, #1
    1a9c:	6183      	streq	r3, [r0, #24]
    1a9e:	f000 f81f 	bl	1ae0 <__sfp>
    1aa2:	6060      	str	r0, [r4, #4]
    1aa4:	4620      	mov	r0, r4
    1aa6:	f000 f81b 	bl	1ae0 <__sfp>
    1aaa:	60a0      	str	r0, [r4, #8]
    1aac:	4620      	mov	r0, r4
    1aae:	f000 f817 	bl	1ae0 <__sfp>
    1ab2:	2200      	movs	r2, #0
    1ab4:	60e0      	str	r0, [r4, #12]
    1ab6:	2104      	movs	r1, #4
    1ab8:	6860      	ldr	r0, [r4, #4]
    1aba:	f7ff ffa7 	bl	1a0c <std.isra.0>
    1abe:	2201      	movs	r2, #1
    1ac0:	2109      	movs	r1, #9
    1ac2:	68a0      	ldr	r0, [r4, #8]
    1ac4:	f7ff ffa2 	bl	1a0c <std.isra.0>
    1ac8:	2202      	movs	r2, #2
    1aca:	2112      	movs	r1, #18
    1acc:	68e0      	ldr	r0, [r4, #12]
    1ace:	f7ff ff9d 	bl	1a0c <std.isra.0>
    1ad2:	2301      	movs	r3, #1
    1ad4:	61a3      	str	r3, [r4, #24]
    1ad6:	bd10      	pop	{r4, pc}
    1ad8:	00002934 	.word	0x00002934
    1adc:	00001a01 	.word	0x00001a01

00001ae0 <__sfp>:
    1ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ae2:	4b1c      	ldr	r3, [pc, #112]	; (1b54 <__sfp+0x74>)
    1ae4:	681e      	ldr	r6, [r3, #0]
    1ae6:	69b3      	ldr	r3, [r6, #24]
    1ae8:	4607      	mov	r7, r0
    1aea:	b913      	cbnz	r3, 1af2 <__sfp+0x12>
    1aec:	4630      	mov	r0, r6
    1aee:	f7ff ffc7 	bl	1a80 <__sinit>
    1af2:	3648      	adds	r6, #72	; 0x48
    1af4:	68b4      	ldr	r4, [r6, #8]
    1af6:	6873      	ldr	r3, [r6, #4]
    1af8:	3b01      	subs	r3, #1
    1afa:	d503      	bpl.n	1b04 <__sfp+0x24>
    1afc:	6833      	ldr	r3, [r6, #0]
    1afe:	b133      	cbz	r3, 1b0e <__sfp+0x2e>
    1b00:	6836      	ldr	r6, [r6, #0]
    1b02:	e7f7      	b.n	1af4 <__sfp+0x14>
    1b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1b08:	b16d      	cbz	r5, 1b26 <__sfp+0x46>
    1b0a:	3468      	adds	r4, #104	; 0x68
    1b0c:	e7f4      	b.n	1af8 <__sfp+0x18>
    1b0e:	2104      	movs	r1, #4
    1b10:	4638      	mov	r0, r7
    1b12:	f7ff ff9f 	bl	1a54 <__sfmoreglue>
    1b16:	6030      	str	r0, [r6, #0]
    1b18:	2800      	cmp	r0, #0
    1b1a:	d1f1      	bne.n	1b00 <__sfp+0x20>
    1b1c:	230c      	movs	r3, #12
    1b1e:	603b      	str	r3, [r7, #0]
    1b20:	4604      	mov	r4, r0
    1b22:	4620      	mov	r0, r4
    1b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1b2a:	81e3      	strh	r3, [r4, #14]
    1b2c:	2301      	movs	r3, #1
    1b2e:	81a3      	strh	r3, [r4, #12]
    1b30:	6665      	str	r5, [r4, #100]	; 0x64
    1b32:	6025      	str	r5, [r4, #0]
    1b34:	60a5      	str	r5, [r4, #8]
    1b36:	6065      	str	r5, [r4, #4]
    1b38:	6125      	str	r5, [r4, #16]
    1b3a:	6165      	str	r5, [r4, #20]
    1b3c:	61a5      	str	r5, [r4, #24]
    1b3e:	2208      	movs	r2, #8
    1b40:	4629      	mov	r1, r5
    1b42:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1b46:	f7ff fcaf 	bl	14a8 <memset>
    1b4a:	6365      	str	r5, [r4, #52]	; 0x34
    1b4c:	63a5      	str	r5, [r4, #56]	; 0x38
    1b4e:	64a5      	str	r5, [r4, #72]	; 0x48
    1b50:	64e5      	str	r5, [r4, #76]	; 0x4c
    1b52:	e7e6      	b.n	1b22 <__sfp+0x42>
    1b54:	00002934 	.word	0x00002934

00001b58 <_fwalk_reent>:
    1b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1b5c:	4680      	mov	r8, r0
    1b5e:	4689      	mov	r9, r1
    1b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1b64:	2600      	movs	r6, #0
    1b66:	b914      	cbnz	r4, 1b6e <_fwalk_reent+0x16>
    1b68:	4630      	mov	r0, r6
    1b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1b6e:	68a5      	ldr	r5, [r4, #8]
    1b70:	6867      	ldr	r7, [r4, #4]
    1b72:	3f01      	subs	r7, #1
    1b74:	d501      	bpl.n	1b7a <_fwalk_reent+0x22>
    1b76:	6824      	ldr	r4, [r4, #0]
    1b78:	e7f5      	b.n	1b66 <_fwalk_reent+0xe>
    1b7a:	89ab      	ldrh	r3, [r5, #12]
    1b7c:	2b01      	cmp	r3, #1
    1b7e:	d907      	bls.n	1b90 <_fwalk_reent+0x38>
    1b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1b84:	3301      	adds	r3, #1
    1b86:	d003      	beq.n	1b90 <_fwalk_reent+0x38>
    1b88:	4629      	mov	r1, r5
    1b8a:	4640      	mov	r0, r8
    1b8c:	47c8      	blx	r9
    1b8e:	4306      	orrs	r6, r0
    1b90:	3568      	adds	r5, #104	; 0x68
    1b92:	e7ee      	b.n	1b72 <_fwalk_reent+0x1a>

00001b94 <__swhatbuf_r>:
    1b94:	b570      	push	{r4, r5, r6, lr}
    1b96:	460e      	mov	r6, r1
    1b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1b9c:	2900      	cmp	r1, #0
    1b9e:	b090      	sub	sp, #64	; 0x40
    1ba0:	4614      	mov	r4, r2
    1ba2:	461d      	mov	r5, r3
    1ba4:	da07      	bge.n	1bb6 <__swhatbuf_r+0x22>
    1ba6:	2300      	movs	r3, #0
    1ba8:	602b      	str	r3, [r5, #0]
    1baa:	89b3      	ldrh	r3, [r6, #12]
    1bac:	061a      	lsls	r2, r3, #24
    1bae:	d410      	bmi.n	1bd2 <__swhatbuf_r+0x3e>
    1bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1bb4:	e00e      	b.n	1bd4 <__swhatbuf_r+0x40>
    1bb6:	aa01      	add	r2, sp, #4
    1bb8:	f000 fc4e 	bl	2458 <_fstat_r>
    1bbc:	2800      	cmp	r0, #0
    1bbe:	dbf2      	blt.n	1ba6 <__swhatbuf_r+0x12>
    1bc0:	9a02      	ldr	r2, [sp, #8]
    1bc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1bc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    1bca:	425a      	negs	r2, r3
    1bcc:	415a      	adcs	r2, r3
    1bce:	602a      	str	r2, [r5, #0]
    1bd0:	e7ee      	b.n	1bb0 <__swhatbuf_r+0x1c>
    1bd2:	2340      	movs	r3, #64	; 0x40
    1bd4:	2000      	movs	r0, #0
    1bd6:	6023      	str	r3, [r4, #0]
    1bd8:	b010      	add	sp, #64	; 0x40
    1bda:	bd70      	pop	{r4, r5, r6, pc}

00001bdc <__smakebuf_r>:
    1bdc:	898b      	ldrh	r3, [r1, #12]
    1bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1be0:	079d      	lsls	r5, r3, #30
    1be2:	4606      	mov	r6, r0
    1be4:	460c      	mov	r4, r1
    1be6:	d507      	bpl.n	1bf8 <__smakebuf_r+0x1c>
    1be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1bec:	6023      	str	r3, [r4, #0]
    1bee:	6123      	str	r3, [r4, #16]
    1bf0:	2301      	movs	r3, #1
    1bf2:	6163      	str	r3, [r4, #20]
    1bf4:	b002      	add	sp, #8
    1bf6:	bd70      	pop	{r4, r5, r6, pc}
    1bf8:	ab01      	add	r3, sp, #4
    1bfa:	466a      	mov	r2, sp
    1bfc:	f7ff ffca 	bl	1b94 <__swhatbuf_r>
    1c00:	9900      	ldr	r1, [sp, #0]
    1c02:	4605      	mov	r5, r0
    1c04:	4630      	mov	r0, r6
    1c06:	f000 f87f 	bl	1d08 <_malloc_r>
    1c0a:	b948      	cbnz	r0, 1c20 <__smakebuf_r+0x44>
    1c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c10:	059a      	lsls	r2, r3, #22
    1c12:	d4ef      	bmi.n	1bf4 <__smakebuf_r+0x18>
    1c14:	f023 0303 	bic.w	r3, r3, #3
    1c18:	f043 0302 	orr.w	r3, r3, #2
    1c1c:	81a3      	strh	r3, [r4, #12]
    1c1e:	e7e3      	b.n	1be8 <__smakebuf_r+0xc>
    1c20:	4b0d      	ldr	r3, [pc, #52]	; (1c58 <__smakebuf_r+0x7c>)
    1c22:	62b3      	str	r3, [r6, #40]	; 0x28
    1c24:	89a3      	ldrh	r3, [r4, #12]
    1c26:	6020      	str	r0, [r4, #0]
    1c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1c2c:	81a3      	strh	r3, [r4, #12]
    1c2e:	9b00      	ldr	r3, [sp, #0]
    1c30:	6163      	str	r3, [r4, #20]
    1c32:	9b01      	ldr	r3, [sp, #4]
    1c34:	6120      	str	r0, [r4, #16]
    1c36:	b15b      	cbz	r3, 1c50 <__smakebuf_r+0x74>
    1c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1c3c:	4630      	mov	r0, r6
    1c3e:	f000 fc1d 	bl	247c <_isatty_r>
    1c42:	b128      	cbz	r0, 1c50 <__smakebuf_r+0x74>
    1c44:	89a3      	ldrh	r3, [r4, #12]
    1c46:	f023 0303 	bic.w	r3, r3, #3
    1c4a:	f043 0301 	orr.w	r3, r3, #1
    1c4e:	81a3      	strh	r3, [r4, #12]
    1c50:	89a3      	ldrh	r3, [r4, #12]
    1c52:	431d      	orrs	r5, r3
    1c54:	81a5      	strh	r5, [r4, #12]
    1c56:	e7cd      	b.n	1bf4 <__smakebuf_r+0x18>
    1c58:	00001a01 	.word	0x00001a01

00001c5c <malloc>:
    1c5c:	4b02      	ldr	r3, [pc, #8]	; (1c68 <malloc+0xc>)
    1c5e:	4601      	mov	r1, r0
    1c60:	6818      	ldr	r0, [r3, #0]
    1c62:	f000 b851 	b.w	1d08 <_malloc_r>
    1c66:	bf00      	nop
    1c68:	20000010 	.word	0x20000010

00001c6c <_free_r>:
    1c6c:	b538      	push	{r3, r4, r5, lr}
    1c6e:	4605      	mov	r5, r0
    1c70:	2900      	cmp	r1, #0
    1c72:	d045      	beq.n	1d00 <_free_r+0x94>
    1c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1c78:	1f0c      	subs	r4, r1, #4
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	bfb8      	it	lt
    1c7e:	18e4      	addlt	r4, r4, r3
    1c80:	f000 fc6e 	bl	2560 <__malloc_lock>
    1c84:	4a1f      	ldr	r2, [pc, #124]	; (1d04 <_free_r+0x98>)
    1c86:	6813      	ldr	r3, [r2, #0]
    1c88:	4610      	mov	r0, r2
    1c8a:	b933      	cbnz	r3, 1c9a <_free_r+0x2e>
    1c8c:	6063      	str	r3, [r4, #4]
    1c8e:	6014      	str	r4, [r2, #0]
    1c90:	4628      	mov	r0, r5
    1c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1c96:	f000 bc64 	b.w	2562 <__malloc_unlock>
    1c9a:	42a3      	cmp	r3, r4
    1c9c:	d90c      	bls.n	1cb8 <_free_r+0x4c>
    1c9e:	6821      	ldr	r1, [r4, #0]
    1ca0:	1862      	adds	r2, r4, r1
    1ca2:	4293      	cmp	r3, r2
    1ca4:	bf04      	itt	eq
    1ca6:	681a      	ldreq	r2, [r3, #0]
    1ca8:	685b      	ldreq	r3, [r3, #4]
    1caa:	6063      	str	r3, [r4, #4]
    1cac:	bf04      	itt	eq
    1cae:	1852      	addeq	r2, r2, r1
    1cb0:	6022      	streq	r2, [r4, #0]
    1cb2:	6004      	str	r4, [r0, #0]
    1cb4:	e7ec      	b.n	1c90 <_free_r+0x24>
    1cb6:	4613      	mov	r3, r2
    1cb8:	685a      	ldr	r2, [r3, #4]
    1cba:	b10a      	cbz	r2, 1cc0 <_free_r+0x54>
    1cbc:	42a2      	cmp	r2, r4
    1cbe:	d9fa      	bls.n	1cb6 <_free_r+0x4a>
    1cc0:	6819      	ldr	r1, [r3, #0]
    1cc2:	1858      	adds	r0, r3, r1
    1cc4:	42a0      	cmp	r0, r4
    1cc6:	d10b      	bne.n	1ce0 <_free_r+0x74>
    1cc8:	6820      	ldr	r0, [r4, #0]
    1cca:	4401      	add	r1, r0
    1ccc:	1858      	adds	r0, r3, r1
    1cce:	4282      	cmp	r2, r0
    1cd0:	6019      	str	r1, [r3, #0]
    1cd2:	d1dd      	bne.n	1c90 <_free_r+0x24>
    1cd4:	6810      	ldr	r0, [r2, #0]
    1cd6:	6852      	ldr	r2, [r2, #4]
    1cd8:	605a      	str	r2, [r3, #4]
    1cda:	4401      	add	r1, r0
    1cdc:	6019      	str	r1, [r3, #0]
    1cde:	e7d7      	b.n	1c90 <_free_r+0x24>
    1ce0:	d902      	bls.n	1ce8 <_free_r+0x7c>
    1ce2:	230c      	movs	r3, #12
    1ce4:	602b      	str	r3, [r5, #0]
    1ce6:	e7d3      	b.n	1c90 <_free_r+0x24>
    1ce8:	6820      	ldr	r0, [r4, #0]
    1cea:	1821      	adds	r1, r4, r0
    1cec:	428a      	cmp	r2, r1
    1cee:	bf04      	itt	eq
    1cf0:	6811      	ldreq	r1, [r2, #0]
    1cf2:	6852      	ldreq	r2, [r2, #4]
    1cf4:	6062      	str	r2, [r4, #4]
    1cf6:	bf04      	itt	eq
    1cf8:	1809      	addeq	r1, r1, r0
    1cfa:	6021      	streq	r1, [r4, #0]
    1cfc:	605c      	str	r4, [r3, #4]
    1cfe:	e7c7      	b.n	1c90 <_free_r+0x24>
    1d00:	bd38      	pop	{r3, r4, r5, pc}
    1d02:	bf00      	nop
    1d04:	20000234 	.word	0x20000234

00001d08 <_malloc_r>:
    1d08:	b570      	push	{r4, r5, r6, lr}
    1d0a:	1ccd      	adds	r5, r1, #3
    1d0c:	f025 0503 	bic.w	r5, r5, #3
    1d10:	3508      	adds	r5, #8
    1d12:	2d0c      	cmp	r5, #12
    1d14:	bf38      	it	cc
    1d16:	250c      	movcc	r5, #12
    1d18:	2d00      	cmp	r5, #0
    1d1a:	4606      	mov	r6, r0
    1d1c:	db01      	blt.n	1d22 <_malloc_r+0x1a>
    1d1e:	42a9      	cmp	r1, r5
    1d20:	d903      	bls.n	1d2a <_malloc_r+0x22>
    1d22:	230c      	movs	r3, #12
    1d24:	6033      	str	r3, [r6, #0]
    1d26:	2000      	movs	r0, #0
    1d28:	bd70      	pop	{r4, r5, r6, pc}
    1d2a:	f000 fc19 	bl	2560 <__malloc_lock>
    1d2e:	4a23      	ldr	r2, [pc, #140]	; (1dbc <_malloc_r+0xb4>)
    1d30:	6814      	ldr	r4, [r2, #0]
    1d32:	4621      	mov	r1, r4
    1d34:	b991      	cbnz	r1, 1d5c <_malloc_r+0x54>
    1d36:	4c22      	ldr	r4, [pc, #136]	; (1dc0 <_malloc_r+0xb8>)
    1d38:	6823      	ldr	r3, [r4, #0]
    1d3a:	b91b      	cbnz	r3, 1d44 <_malloc_r+0x3c>
    1d3c:	4630      	mov	r0, r6
    1d3e:	f000 fb15 	bl	236c <_sbrk_r>
    1d42:	6020      	str	r0, [r4, #0]
    1d44:	4629      	mov	r1, r5
    1d46:	4630      	mov	r0, r6
    1d48:	f000 fb10 	bl	236c <_sbrk_r>
    1d4c:	1c43      	adds	r3, r0, #1
    1d4e:	d126      	bne.n	1d9e <_malloc_r+0x96>
    1d50:	230c      	movs	r3, #12
    1d52:	6033      	str	r3, [r6, #0]
    1d54:	4630      	mov	r0, r6
    1d56:	f000 fc04 	bl	2562 <__malloc_unlock>
    1d5a:	e7e4      	b.n	1d26 <_malloc_r+0x1e>
    1d5c:	680b      	ldr	r3, [r1, #0]
    1d5e:	1b5b      	subs	r3, r3, r5
    1d60:	d41a      	bmi.n	1d98 <_malloc_r+0x90>
    1d62:	2b0b      	cmp	r3, #11
    1d64:	d90f      	bls.n	1d86 <_malloc_r+0x7e>
    1d66:	600b      	str	r3, [r1, #0]
    1d68:	50cd      	str	r5, [r1, r3]
    1d6a:	18cc      	adds	r4, r1, r3
    1d6c:	4630      	mov	r0, r6
    1d6e:	f000 fbf8 	bl	2562 <__malloc_unlock>
    1d72:	f104 000b 	add.w	r0, r4, #11
    1d76:	1d23      	adds	r3, r4, #4
    1d78:	f020 0007 	bic.w	r0, r0, #7
    1d7c:	1ac3      	subs	r3, r0, r3
    1d7e:	d01b      	beq.n	1db8 <_malloc_r+0xb0>
    1d80:	425a      	negs	r2, r3
    1d82:	50e2      	str	r2, [r4, r3]
    1d84:	bd70      	pop	{r4, r5, r6, pc}
    1d86:	428c      	cmp	r4, r1
    1d88:	bf0d      	iteet	eq
    1d8a:	6863      	ldreq	r3, [r4, #4]
    1d8c:	684b      	ldrne	r3, [r1, #4]
    1d8e:	6063      	strne	r3, [r4, #4]
    1d90:	6013      	streq	r3, [r2, #0]
    1d92:	bf18      	it	ne
    1d94:	460c      	movne	r4, r1
    1d96:	e7e9      	b.n	1d6c <_malloc_r+0x64>
    1d98:	460c      	mov	r4, r1
    1d9a:	6849      	ldr	r1, [r1, #4]
    1d9c:	e7ca      	b.n	1d34 <_malloc_r+0x2c>
    1d9e:	1cc4      	adds	r4, r0, #3
    1da0:	f024 0403 	bic.w	r4, r4, #3
    1da4:	42a0      	cmp	r0, r4
    1da6:	d005      	beq.n	1db4 <_malloc_r+0xac>
    1da8:	1a21      	subs	r1, r4, r0
    1daa:	4630      	mov	r0, r6
    1dac:	f000 fade 	bl	236c <_sbrk_r>
    1db0:	3001      	adds	r0, #1
    1db2:	d0cd      	beq.n	1d50 <_malloc_r+0x48>
    1db4:	6025      	str	r5, [r4, #0]
    1db6:	e7d9      	b.n	1d6c <_malloc_r+0x64>
    1db8:	bd70      	pop	{r4, r5, r6, pc}
    1dba:	bf00      	nop
    1dbc:	20000234 	.word	0x20000234
    1dc0:	20000238 	.word	0x20000238

00001dc4 <__sfputc_r>:
    1dc4:	6893      	ldr	r3, [r2, #8]
    1dc6:	3b01      	subs	r3, #1
    1dc8:	2b00      	cmp	r3, #0
    1dca:	b410      	push	{r4}
    1dcc:	6093      	str	r3, [r2, #8]
    1dce:	da08      	bge.n	1de2 <__sfputc_r+0x1e>
    1dd0:	6994      	ldr	r4, [r2, #24]
    1dd2:	42a3      	cmp	r3, r4
    1dd4:	db02      	blt.n	1ddc <__sfputc_r+0x18>
    1dd6:	b2cb      	uxtb	r3, r1
    1dd8:	2b0a      	cmp	r3, #10
    1dda:	d102      	bne.n	1de2 <__sfputc_r+0x1e>
    1ddc:	bc10      	pop	{r4}
    1dde:	f7ff bc9d 	b.w	171c <__swbuf_r>
    1de2:	6813      	ldr	r3, [r2, #0]
    1de4:	1c58      	adds	r0, r3, #1
    1de6:	6010      	str	r0, [r2, #0]
    1de8:	7019      	strb	r1, [r3, #0]
    1dea:	b2c8      	uxtb	r0, r1
    1dec:	bc10      	pop	{r4}
    1dee:	4770      	bx	lr

00001df0 <__sfputs_r>:
    1df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1df2:	4606      	mov	r6, r0
    1df4:	460f      	mov	r7, r1
    1df6:	4614      	mov	r4, r2
    1df8:	18d5      	adds	r5, r2, r3
    1dfa:	42ac      	cmp	r4, r5
    1dfc:	d101      	bne.n	1e02 <__sfputs_r+0x12>
    1dfe:	2000      	movs	r0, #0
    1e00:	e007      	b.n	1e12 <__sfputs_r+0x22>
    1e02:	463a      	mov	r2, r7
    1e04:	f814 1b01 	ldrb.w	r1, [r4], #1
    1e08:	4630      	mov	r0, r6
    1e0a:	f7ff ffdb 	bl	1dc4 <__sfputc_r>
    1e0e:	1c43      	adds	r3, r0, #1
    1e10:	d1f3      	bne.n	1dfa <__sfputs_r+0xa>
    1e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001e14 <_vfiprintf_r>:
    1e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e18:	b09d      	sub	sp, #116	; 0x74
    1e1a:	460c      	mov	r4, r1
    1e1c:	4617      	mov	r7, r2
    1e1e:	9303      	str	r3, [sp, #12]
    1e20:	4606      	mov	r6, r0
    1e22:	b118      	cbz	r0, 1e2c <_vfiprintf_r+0x18>
    1e24:	6983      	ldr	r3, [r0, #24]
    1e26:	b90b      	cbnz	r3, 1e2c <_vfiprintf_r+0x18>
    1e28:	f7ff fe2a 	bl	1a80 <__sinit>
    1e2c:	4b7c      	ldr	r3, [pc, #496]	; (2020 <_vfiprintf_r+0x20c>)
    1e2e:	429c      	cmp	r4, r3
    1e30:	d157      	bne.n	1ee2 <_vfiprintf_r+0xce>
    1e32:	6874      	ldr	r4, [r6, #4]
    1e34:	89a3      	ldrh	r3, [r4, #12]
    1e36:	0718      	lsls	r0, r3, #28
    1e38:	d55d      	bpl.n	1ef6 <_vfiprintf_r+0xe2>
    1e3a:	6923      	ldr	r3, [r4, #16]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d05a      	beq.n	1ef6 <_vfiprintf_r+0xe2>
    1e40:	2300      	movs	r3, #0
    1e42:	9309      	str	r3, [sp, #36]	; 0x24
    1e44:	2320      	movs	r3, #32
    1e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1e4a:	2330      	movs	r3, #48	; 0x30
    1e4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    1e50:	f04f 0b01 	mov.w	fp, #1
    1e54:	46b8      	mov	r8, r7
    1e56:	4645      	mov	r5, r8
    1e58:	f815 3b01 	ldrb.w	r3, [r5], #1
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d155      	bne.n	1f0c <_vfiprintf_r+0xf8>
    1e60:	ebb8 0a07 	subs.w	sl, r8, r7
    1e64:	d00b      	beq.n	1e7e <_vfiprintf_r+0x6a>
    1e66:	4653      	mov	r3, sl
    1e68:	463a      	mov	r2, r7
    1e6a:	4621      	mov	r1, r4
    1e6c:	4630      	mov	r0, r6
    1e6e:	f7ff ffbf 	bl	1df0 <__sfputs_r>
    1e72:	3001      	adds	r0, #1
    1e74:	f000 80c4 	beq.w	2000 <_vfiprintf_r+0x1ec>
    1e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e7a:	4453      	add	r3, sl
    1e7c:	9309      	str	r3, [sp, #36]	; 0x24
    1e7e:	f898 3000 	ldrb.w	r3, [r8]
    1e82:	2b00      	cmp	r3, #0
    1e84:	f000 80bc 	beq.w	2000 <_vfiprintf_r+0x1ec>
    1e88:	2300      	movs	r3, #0
    1e8a:	f04f 32ff 	mov.w	r2, #4294967295
    1e8e:	9304      	str	r3, [sp, #16]
    1e90:	9307      	str	r3, [sp, #28]
    1e92:	9205      	str	r2, [sp, #20]
    1e94:	9306      	str	r3, [sp, #24]
    1e96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1e9a:	931a      	str	r3, [sp, #104]	; 0x68
    1e9c:	2205      	movs	r2, #5
    1e9e:	7829      	ldrb	r1, [r5, #0]
    1ea0:	4860      	ldr	r0, [pc, #384]	; (2024 <_vfiprintf_r+0x210>)
    1ea2:	f000 fb0d 	bl	24c0 <memchr>
    1ea6:	f105 0801 	add.w	r8, r5, #1
    1eaa:	9b04      	ldr	r3, [sp, #16]
    1eac:	2800      	cmp	r0, #0
    1eae:	d131      	bne.n	1f14 <_vfiprintf_r+0x100>
    1eb0:	06d9      	lsls	r1, r3, #27
    1eb2:	bf44      	itt	mi
    1eb4:	2220      	movmi	r2, #32
    1eb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1eba:	071a      	lsls	r2, r3, #28
    1ebc:	bf44      	itt	mi
    1ebe:	222b      	movmi	r2, #43	; 0x2b
    1ec0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1ec4:	782a      	ldrb	r2, [r5, #0]
    1ec6:	2a2a      	cmp	r2, #42	; 0x2a
    1ec8:	d02c      	beq.n	1f24 <_vfiprintf_r+0x110>
    1eca:	9a07      	ldr	r2, [sp, #28]
    1ecc:	2100      	movs	r1, #0
    1ece:	200a      	movs	r0, #10
    1ed0:	46a8      	mov	r8, r5
    1ed2:	3501      	adds	r5, #1
    1ed4:	f898 3000 	ldrb.w	r3, [r8]
    1ed8:	3b30      	subs	r3, #48	; 0x30
    1eda:	2b09      	cmp	r3, #9
    1edc:	d96d      	bls.n	1fba <_vfiprintf_r+0x1a6>
    1ede:	b371      	cbz	r1, 1f3e <_vfiprintf_r+0x12a>
    1ee0:	e026      	b.n	1f30 <_vfiprintf_r+0x11c>
    1ee2:	4b51      	ldr	r3, [pc, #324]	; (2028 <_vfiprintf_r+0x214>)
    1ee4:	429c      	cmp	r4, r3
    1ee6:	d101      	bne.n	1eec <_vfiprintf_r+0xd8>
    1ee8:	68b4      	ldr	r4, [r6, #8]
    1eea:	e7a3      	b.n	1e34 <_vfiprintf_r+0x20>
    1eec:	4b4f      	ldr	r3, [pc, #316]	; (202c <_vfiprintf_r+0x218>)
    1eee:	429c      	cmp	r4, r3
    1ef0:	bf08      	it	eq
    1ef2:	68f4      	ldreq	r4, [r6, #12]
    1ef4:	e79e      	b.n	1e34 <_vfiprintf_r+0x20>
    1ef6:	4621      	mov	r1, r4
    1ef8:	4630      	mov	r0, r6
    1efa:	f7ff fc61 	bl	17c0 <__swsetup_r>
    1efe:	2800      	cmp	r0, #0
    1f00:	d09e      	beq.n	1e40 <_vfiprintf_r+0x2c>
    1f02:	f04f 30ff 	mov.w	r0, #4294967295
    1f06:	b01d      	add	sp, #116	; 0x74
    1f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f0c:	2b25      	cmp	r3, #37	; 0x25
    1f0e:	d0a7      	beq.n	1e60 <_vfiprintf_r+0x4c>
    1f10:	46a8      	mov	r8, r5
    1f12:	e7a0      	b.n	1e56 <_vfiprintf_r+0x42>
    1f14:	4a43      	ldr	r2, [pc, #268]	; (2024 <_vfiprintf_r+0x210>)
    1f16:	1a80      	subs	r0, r0, r2
    1f18:	fa0b f000 	lsl.w	r0, fp, r0
    1f1c:	4318      	orrs	r0, r3
    1f1e:	9004      	str	r0, [sp, #16]
    1f20:	4645      	mov	r5, r8
    1f22:	e7bb      	b.n	1e9c <_vfiprintf_r+0x88>
    1f24:	9a03      	ldr	r2, [sp, #12]
    1f26:	1d11      	adds	r1, r2, #4
    1f28:	6812      	ldr	r2, [r2, #0]
    1f2a:	9103      	str	r1, [sp, #12]
    1f2c:	2a00      	cmp	r2, #0
    1f2e:	db01      	blt.n	1f34 <_vfiprintf_r+0x120>
    1f30:	9207      	str	r2, [sp, #28]
    1f32:	e004      	b.n	1f3e <_vfiprintf_r+0x12a>
    1f34:	4252      	negs	r2, r2
    1f36:	f043 0302 	orr.w	r3, r3, #2
    1f3a:	9207      	str	r2, [sp, #28]
    1f3c:	9304      	str	r3, [sp, #16]
    1f3e:	f898 3000 	ldrb.w	r3, [r8]
    1f42:	2b2e      	cmp	r3, #46	; 0x2e
    1f44:	d110      	bne.n	1f68 <_vfiprintf_r+0x154>
    1f46:	f898 3001 	ldrb.w	r3, [r8, #1]
    1f4a:	2b2a      	cmp	r3, #42	; 0x2a
    1f4c:	f108 0101 	add.w	r1, r8, #1
    1f50:	d137      	bne.n	1fc2 <_vfiprintf_r+0x1ae>
    1f52:	9b03      	ldr	r3, [sp, #12]
    1f54:	1d1a      	adds	r2, r3, #4
    1f56:	681b      	ldr	r3, [r3, #0]
    1f58:	9203      	str	r2, [sp, #12]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	bfb8      	it	lt
    1f5e:	f04f 33ff 	movlt.w	r3, #4294967295
    1f62:	f108 0802 	add.w	r8, r8, #2
    1f66:	9305      	str	r3, [sp, #20]
    1f68:	4d31      	ldr	r5, [pc, #196]	; (2030 <_vfiprintf_r+0x21c>)
    1f6a:	f898 1000 	ldrb.w	r1, [r8]
    1f6e:	2203      	movs	r2, #3
    1f70:	4628      	mov	r0, r5
    1f72:	f000 faa5 	bl	24c0 <memchr>
    1f76:	b140      	cbz	r0, 1f8a <_vfiprintf_r+0x176>
    1f78:	2340      	movs	r3, #64	; 0x40
    1f7a:	1b40      	subs	r0, r0, r5
    1f7c:	fa03 f000 	lsl.w	r0, r3, r0
    1f80:	9b04      	ldr	r3, [sp, #16]
    1f82:	4303      	orrs	r3, r0
    1f84:	9304      	str	r3, [sp, #16]
    1f86:	f108 0801 	add.w	r8, r8, #1
    1f8a:	f898 1000 	ldrb.w	r1, [r8]
    1f8e:	4829      	ldr	r0, [pc, #164]	; (2034 <_vfiprintf_r+0x220>)
    1f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    1f94:	2206      	movs	r2, #6
    1f96:	f108 0701 	add.w	r7, r8, #1
    1f9a:	f000 fa91 	bl	24c0 <memchr>
    1f9e:	2800      	cmp	r0, #0
    1fa0:	d034      	beq.n	200c <_vfiprintf_r+0x1f8>
    1fa2:	4b25      	ldr	r3, [pc, #148]	; (2038 <_vfiprintf_r+0x224>)
    1fa4:	bb03      	cbnz	r3, 1fe8 <_vfiprintf_r+0x1d4>
    1fa6:	9b03      	ldr	r3, [sp, #12]
    1fa8:	3307      	adds	r3, #7
    1faa:	f023 0307 	bic.w	r3, r3, #7
    1fae:	3308      	adds	r3, #8
    1fb0:	9303      	str	r3, [sp, #12]
    1fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fb4:	444b      	add	r3, r9
    1fb6:	9309      	str	r3, [sp, #36]	; 0x24
    1fb8:	e74c      	b.n	1e54 <_vfiprintf_r+0x40>
    1fba:	fb00 3202 	mla	r2, r0, r2, r3
    1fbe:	2101      	movs	r1, #1
    1fc0:	e786      	b.n	1ed0 <_vfiprintf_r+0xbc>
    1fc2:	2300      	movs	r3, #0
    1fc4:	9305      	str	r3, [sp, #20]
    1fc6:	4618      	mov	r0, r3
    1fc8:	250a      	movs	r5, #10
    1fca:	4688      	mov	r8, r1
    1fcc:	3101      	adds	r1, #1
    1fce:	f898 2000 	ldrb.w	r2, [r8]
    1fd2:	3a30      	subs	r2, #48	; 0x30
    1fd4:	2a09      	cmp	r2, #9
    1fd6:	d903      	bls.n	1fe0 <_vfiprintf_r+0x1cc>
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d0c5      	beq.n	1f68 <_vfiprintf_r+0x154>
    1fdc:	9005      	str	r0, [sp, #20]
    1fde:	e7c3      	b.n	1f68 <_vfiprintf_r+0x154>
    1fe0:	fb05 2000 	mla	r0, r5, r0, r2
    1fe4:	2301      	movs	r3, #1
    1fe6:	e7f0      	b.n	1fca <_vfiprintf_r+0x1b6>
    1fe8:	ab03      	add	r3, sp, #12
    1fea:	9300      	str	r3, [sp, #0]
    1fec:	4622      	mov	r2, r4
    1fee:	4b13      	ldr	r3, [pc, #76]	; (203c <_vfiprintf_r+0x228>)
    1ff0:	a904      	add	r1, sp, #16
    1ff2:	4630      	mov	r0, r6
    1ff4:	f3af 8000 	nop.w
    1ff8:	f1b0 3fff 	cmp.w	r0, #4294967295
    1ffc:	4681      	mov	r9, r0
    1ffe:	d1d8      	bne.n	1fb2 <_vfiprintf_r+0x19e>
    2000:	89a3      	ldrh	r3, [r4, #12]
    2002:	065b      	lsls	r3, r3, #25
    2004:	f53f af7d 	bmi.w	1f02 <_vfiprintf_r+0xee>
    2008:	9809      	ldr	r0, [sp, #36]	; 0x24
    200a:	e77c      	b.n	1f06 <_vfiprintf_r+0xf2>
    200c:	ab03      	add	r3, sp, #12
    200e:	9300      	str	r3, [sp, #0]
    2010:	4622      	mov	r2, r4
    2012:	4b0a      	ldr	r3, [pc, #40]	; (203c <_vfiprintf_r+0x228>)
    2014:	a904      	add	r1, sp, #16
    2016:	4630      	mov	r0, r6
    2018:	f000 f888 	bl	212c <_printf_i>
    201c:	e7ec      	b.n	1ff8 <_vfiprintf_r+0x1e4>
    201e:	bf00      	nop
    2020:	00002958 	.word	0x00002958
    2024:	00002998 	.word	0x00002998
    2028:	00002978 	.word	0x00002978
    202c:	00002938 	.word	0x00002938
    2030:	0000299e 	.word	0x0000299e
    2034:	000029a2 	.word	0x000029a2
    2038:	00000000 	.word	0x00000000
    203c:	00001df1 	.word	0x00001df1

00002040 <_printf_common>:
    2040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2044:	4691      	mov	r9, r2
    2046:	461f      	mov	r7, r3
    2048:	688a      	ldr	r2, [r1, #8]
    204a:	690b      	ldr	r3, [r1, #16]
    204c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2050:	4293      	cmp	r3, r2
    2052:	bfb8      	it	lt
    2054:	4613      	movlt	r3, r2
    2056:	f8c9 3000 	str.w	r3, [r9]
    205a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    205e:	4606      	mov	r6, r0
    2060:	460c      	mov	r4, r1
    2062:	b112      	cbz	r2, 206a <_printf_common+0x2a>
    2064:	3301      	adds	r3, #1
    2066:	f8c9 3000 	str.w	r3, [r9]
    206a:	6823      	ldr	r3, [r4, #0]
    206c:	0699      	lsls	r1, r3, #26
    206e:	bf42      	ittt	mi
    2070:	f8d9 3000 	ldrmi.w	r3, [r9]
    2074:	3302      	addmi	r3, #2
    2076:	f8c9 3000 	strmi.w	r3, [r9]
    207a:	6825      	ldr	r5, [r4, #0]
    207c:	f015 0506 	ands.w	r5, r5, #6
    2080:	d107      	bne.n	2092 <_printf_common+0x52>
    2082:	f104 0a19 	add.w	sl, r4, #25
    2086:	68e3      	ldr	r3, [r4, #12]
    2088:	f8d9 2000 	ldr.w	r2, [r9]
    208c:	1a9b      	subs	r3, r3, r2
    208e:	429d      	cmp	r5, r3
    2090:	db29      	blt.n	20e6 <_printf_common+0xa6>
    2092:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2096:	6822      	ldr	r2, [r4, #0]
    2098:	3300      	adds	r3, #0
    209a:	bf18      	it	ne
    209c:	2301      	movne	r3, #1
    209e:	0692      	lsls	r2, r2, #26
    20a0:	d42e      	bmi.n	2100 <_printf_common+0xc0>
    20a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
    20a6:	4639      	mov	r1, r7
    20a8:	4630      	mov	r0, r6
    20aa:	47c0      	blx	r8
    20ac:	3001      	adds	r0, #1
    20ae:	d021      	beq.n	20f4 <_printf_common+0xb4>
    20b0:	6823      	ldr	r3, [r4, #0]
    20b2:	68e5      	ldr	r5, [r4, #12]
    20b4:	f8d9 2000 	ldr.w	r2, [r9]
    20b8:	f003 0306 	and.w	r3, r3, #6
    20bc:	2b04      	cmp	r3, #4
    20be:	bf08      	it	eq
    20c0:	1aad      	subeq	r5, r5, r2
    20c2:	68a3      	ldr	r3, [r4, #8]
    20c4:	6922      	ldr	r2, [r4, #16]
    20c6:	bf0c      	ite	eq
    20c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    20cc:	2500      	movne	r5, #0
    20ce:	4293      	cmp	r3, r2
    20d0:	bfc4      	itt	gt
    20d2:	1a9b      	subgt	r3, r3, r2
    20d4:	18ed      	addgt	r5, r5, r3
    20d6:	f04f 0900 	mov.w	r9, #0
    20da:	341a      	adds	r4, #26
    20dc:	454d      	cmp	r5, r9
    20de:	d11b      	bne.n	2118 <_printf_common+0xd8>
    20e0:	2000      	movs	r0, #0
    20e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20e6:	2301      	movs	r3, #1
    20e8:	4652      	mov	r2, sl
    20ea:	4639      	mov	r1, r7
    20ec:	4630      	mov	r0, r6
    20ee:	47c0      	blx	r8
    20f0:	3001      	adds	r0, #1
    20f2:	d103      	bne.n	20fc <_printf_common+0xbc>
    20f4:	f04f 30ff 	mov.w	r0, #4294967295
    20f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20fc:	3501      	adds	r5, #1
    20fe:	e7c2      	b.n	2086 <_printf_common+0x46>
    2100:	18e1      	adds	r1, r4, r3
    2102:	1c5a      	adds	r2, r3, #1
    2104:	2030      	movs	r0, #48	; 0x30
    2106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    210a:	4422      	add	r2, r4
    210c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2114:	3302      	adds	r3, #2
    2116:	e7c4      	b.n	20a2 <_printf_common+0x62>
    2118:	2301      	movs	r3, #1
    211a:	4622      	mov	r2, r4
    211c:	4639      	mov	r1, r7
    211e:	4630      	mov	r0, r6
    2120:	47c0      	blx	r8
    2122:	3001      	adds	r0, #1
    2124:	d0e6      	beq.n	20f4 <_printf_common+0xb4>
    2126:	f109 0901 	add.w	r9, r9, #1
    212a:	e7d7      	b.n	20dc <_printf_common+0x9c>

0000212c <_printf_i>:
    212c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2130:	4617      	mov	r7, r2
    2132:	7e0a      	ldrb	r2, [r1, #24]
    2134:	b085      	sub	sp, #20
    2136:	2a6e      	cmp	r2, #110	; 0x6e
    2138:	4698      	mov	r8, r3
    213a:	4606      	mov	r6, r0
    213c:	460c      	mov	r4, r1
    213e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2140:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    2144:	f000 80bc 	beq.w	22c0 <_printf_i+0x194>
    2148:	d81a      	bhi.n	2180 <_printf_i+0x54>
    214a:	2a63      	cmp	r2, #99	; 0x63
    214c:	d02e      	beq.n	21ac <_printf_i+0x80>
    214e:	d80a      	bhi.n	2166 <_printf_i+0x3a>
    2150:	2a00      	cmp	r2, #0
    2152:	f000 80c8 	beq.w	22e6 <_printf_i+0x1ba>
    2156:	2a58      	cmp	r2, #88	; 0x58
    2158:	f000 808a 	beq.w	2270 <_printf_i+0x144>
    215c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2160:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    2164:	e02a      	b.n	21bc <_printf_i+0x90>
    2166:	2a64      	cmp	r2, #100	; 0x64
    2168:	d001      	beq.n	216e <_printf_i+0x42>
    216a:	2a69      	cmp	r2, #105	; 0x69
    216c:	d1f6      	bne.n	215c <_printf_i+0x30>
    216e:	6821      	ldr	r1, [r4, #0]
    2170:	681a      	ldr	r2, [r3, #0]
    2172:	f011 0f80 	tst.w	r1, #128	; 0x80
    2176:	d023      	beq.n	21c0 <_printf_i+0x94>
    2178:	1d11      	adds	r1, r2, #4
    217a:	6019      	str	r1, [r3, #0]
    217c:	6813      	ldr	r3, [r2, #0]
    217e:	e027      	b.n	21d0 <_printf_i+0xa4>
    2180:	2a73      	cmp	r2, #115	; 0x73
    2182:	f000 80b4 	beq.w	22ee <_printf_i+0x1c2>
    2186:	d808      	bhi.n	219a <_printf_i+0x6e>
    2188:	2a6f      	cmp	r2, #111	; 0x6f
    218a:	d02a      	beq.n	21e2 <_printf_i+0xb6>
    218c:	2a70      	cmp	r2, #112	; 0x70
    218e:	d1e5      	bne.n	215c <_printf_i+0x30>
    2190:	680a      	ldr	r2, [r1, #0]
    2192:	f042 0220 	orr.w	r2, r2, #32
    2196:	600a      	str	r2, [r1, #0]
    2198:	e003      	b.n	21a2 <_printf_i+0x76>
    219a:	2a75      	cmp	r2, #117	; 0x75
    219c:	d021      	beq.n	21e2 <_printf_i+0xb6>
    219e:	2a78      	cmp	r2, #120	; 0x78
    21a0:	d1dc      	bne.n	215c <_printf_i+0x30>
    21a2:	2278      	movs	r2, #120	; 0x78
    21a4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    21a8:	496e      	ldr	r1, [pc, #440]	; (2364 <_printf_i+0x238>)
    21aa:	e064      	b.n	2276 <_printf_i+0x14a>
    21ac:	681a      	ldr	r2, [r3, #0]
    21ae:	f101 0542 	add.w	r5, r1, #66	; 0x42
    21b2:	1d11      	adds	r1, r2, #4
    21b4:	6019      	str	r1, [r3, #0]
    21b6:	6813      	ldr	r3, [r2, #0]
    21b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    21bc:	2301      	movs	r3, #1
    21be:	e0a3      	b.n	2308 <_printf_i+0x1dc>
    21c0:	f011 0f40 	tst.w	r1, #64	; 0x40
    21c4:	f102 0104 	add.w	r1, r2, #4
    21c8:	6019      	str	r1, [r3, #0]
    21ca:	d0d7      	beq.n	217c <_printf_i+0x50>
    21cc:	f9b2 3000 	ldrsh.w	r3, [r2]
    21d0:	2b00      	cmp	r3, #0
    21d2:	da03      	bge.n	21dc <_printf_i+0xb0>
    21d4:	222d      	movs	r2, #45	; 0x2d
    21d6:	425b      	negs	r3, r3
    21d8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    21dc:	4962      	ldr	r1, [pc, #392]	; (2368 <_printf_i+0x23c>)
    21de:	220a      	movs	r2, #10
    21e0:	e017      	b.n	2212 <_printf_i+0xe6>
    21e2:	6820      	ldr	r0, [r4, #0]
    21e4:	6819      	ldr	r1, [r3, #0]
    21e6:	f010 0f80 	tst.w	r0, #128	; 0x80
    21ea:	d003      	beq.n	21f4 <_printf_i+0xc8>
    21ec:	1d08      	adds	r0, r1, #4
    21ee:	6018      	str	r0, [r3, #0]
    21f0:	680b      	ldr	r3, [r1, #0]
    21f2:	e006      	b.n	2202 <_printf_i+0xd6>
    21f4:	f010 0f40 	tst.w	r0, #64	; 0x40
    21f8:	f101 0004 	add.w	r0, r1, #4
    21fc:	6018      	str	r0, [r3, #0]
    21fe:	d0f7      	beq.n	21f0 <_printf_i+0xc4>
    2200:	880b      	ldrh	r3, [r1, #0]
    2202:	4959      	ldr	r1, [pc, #356]	; (2368 <_printf_i+0x23c>)
    2204:	2a6f      	cmp	r2, #111	; 0x6f
    2206:	bf14      	ite	ne
    2208:	220a      	movne	r2, #10
    220a:	2208      	moveq	r2, #8
    220c:	2000      	movs	r0, #0
    220e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    2212:	6865      	ldr	r5, [r4, #4]
    2214:	60a5      	str	r5, [r4, #8]
    2216:	2d00      	cmp	r5, #0
    2218:	f2c0 809c 	blt.w	2354 <_printf_i+0x228>
    221c:	6820      	ldr	r0, [r4, #0]
    221e:	f020 0004 	bic.w	r0, r0, #4
    2222:	6020      	str	r0, [r4, #0]
    2224:	2b00      	cmp	r3, #0
    2226:	d13f      	bne.n	22a8 <_printf_i+0x17c>
    2228:	2d00      	cmp	r5, #0
    222a:	f040 8095 	bne.w	2358 <_printf_i+0x22c>
    222e:	4675      	mov	r5, lr
    2230:	2a08      	cmp	r2, #8
    2232:	d10b      	bne.n	224c <_printf_i+0x120>
    2234:	6823      	ldr	r3, [r4, #0]
    2236:	07da      	lsls	r2, r3, #31
    2238:	d508      	bpl.n	224c <_printf_i+0x120>
    223a:	6923      	ldr	r3, [r4, #16]
    223c:	6862      	ldr	r2, [r4, #4]
    223e:	429a      	cmp	r2, r3
    2240:	bfde      	ittt	le
    2242:	2330      	movle	r3, #48	; 0x30
    2244:	f805 3c01 	strble.w	r3, [r5, #-1]
    2248:	f105 35ff 	addle.w	r5, r5, #4294967295
    224c:	ebae 0305 	sub.w	r3, lr, r5
    2250:	6123      	str	r3, [r4, #16]
    2252:	f8cd 8000 	str.w	r8, [sp]
    2256:	463b      	mov	r3, r7
    2258:	aa03      	add	r2, sp, #12
    225a:	4621      	mov	r1, r4
    225c:	4630      	mov	r0, r6
    225e:	f7ff feef 	bl	2040 <_printf_common>
    2262:	3001      	adds	r0, #1
    2264:	d155      	bne.n	2312 <_printf_i+0x1e6>
    2266:	f04f 30ff 	mov.w	r0, #4294967295
    226a:	b005      	add	sp, #20
    226c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2270:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    2274:	493c      	ldr	r1, [pc, #240]	; (2368 <_printf_i+0x23c>)
    2276:	6822      	ldr	r2, [r4, #0]
    2278:	6818      	ldr	r0, [r3, #0]
    227a:	f012 0f80 	tst.w	r2, #128	; 0x80
    227e:	f100 0504 	add.w	r5, r0, #4
    2282:	601d      	str	r5, [r3, #0]
    2284:	d001      	beq.n	228a <_printf_i+0x15e>
    2286:	6803      	ldr	r3, [r0, #0]
    2288:	e002      	b.n	2290 <_printf_i+0x164>
    228a:	0655      	lsls	r5, r2, #25
    228c:	d5fb      	bpl.n	2286 <_printf_i+0x15a>
    228e:	8803      	ldrh	r3, [r0, #0]
    2290:	07d0      	lsls	r0, r2, #31
    2292:	bf44      	itt	mi
    2294:	f042 0220 	orrmi.w	r2, r2, #32
    2298:	6022      	strmi	r2, [r4, #0]
    229a:	b91b      	cbnz	r3, 22a4 <_printf_i+0x178>
    229c:	6822      	ldr	r2, [r4, #0]
    229e:	f022 0220 	bic.w	r2, r2, #32
    22a2:	6022      	str	r2, [r4, #0]
    22a4:	2210      	movs	r2, #16
    22a6:	e7b1      	b.n	220c <_printf_i+0xe0>
    22a8:	4675      	mov	r5, lr
    22aa:	fbb3 f0f2 	udiv	r0, r3, r2
    22ae:	fb02 3310 	mls	r3, r2, r0, r3
    22b2:	5ccb      	ldrb	r3, [r1, r3]
    22b4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    22b8:	4603      	mov	r3, r0
    22ba:	2800      	cmp	r0, #0
    22bc:	d1f5      	bne.n	22aa <_printf_i+0x17e>
    22be:	e7b7      	b.n	2230 <_printf_i+0x104>
    22c0:	6808      	ldr	r0, [r1, #0]
    22c2:	681a      	ldr	r2, [r3, #0]
    22c4:	6949      	ldr	r1, [r1, #20]
    22c6:	f010 0f80 	tst.w	r0, #128	; 0x80
    22ca:	d004      	beq.n	22d6 <_printf_i+0x1aa>
    22cc:	1d10      	adds	r0, r2, #4
    22ce:	6018      	str	r0, [r3, #0]
    22d0:	6813      	ldr	r3, [r2, #0]
    22d2:	6019      	str	r1, [r3, #0]
    22d4:	e007      	b.n	22e6 <_printf_i+0x1ba>
    22d6:	f010 0f40 	tst.w	r0, #64	; 0x40
    22da:	f102 0004 	add.w	r0, r2, #4
    22de:	6018      	str	r0, [r3, #0]
    22e0:	6813      	ldr	r3, [r2, #0]
    22e2:	d0f6      	beq.n	22d2 <_printf_i+0x1a6>
    22e4:	8019      	strh	r1, [r3, #0]
    22e6:	2300      	movs	r3, #0
    22e8:	6123      	str	r3, [r4, #16]
    22ea:	4675      	mov	r5, lr
    22ec:	e7b1      	b.n	2252 <_printf_i+0x126>
    22ee:	681a      	ldr	r2, [r3, #0]
    22f0:	1d11      	adds	r1, r2, #4
    22f2:	6019      	str	r1, [r3, #0]
    22f4:	6815      	ldr	r5, [r2, #0]
    22f6:	6862      	ldr	r2, [r4, #4]
    22f8:	2100      	movs	r1, #0
    22fa:	4628      	mov	r0, r5
    22fc:	f000 f8e0 	bl	24c0 <memchr>
    2300:	b108      	cbz	r0, 2306 <_printf_i+0x1da>
    2302:	1b40      	subs	r0, r0, r5
    2304:	6060      	str	r0, [r4, #4]
    2306:	6863      	ldr	r3, [r4, #4]
    2308:	6123      	str	r3, [r4, #16]
    230a:	2300      	movs	r3, #0
    230c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2310:	e79f      	b.n	2252 <_printf_i+0x126>
    2312:	6923      	ldr	r3, [r4, #16]
    2314:	462a      	mov	r2, r5
    2316:	4639      	mov	r1, r7
    2318:	4630      	mov	r0, r6
    231a:	47c0      	blx	r8
    231c:	3001      	adds	r0, #1
    231e:	d0a2      	beq.n	2266 <_printf_i+0x13a>
    2320:	6823      	ldr	r3, [r4, #0]
    2322:	079b      	lsls	r3, r3, #30
    2324:	d507      	bpl.n	2336 <_printf_i+0x20a>
    2326:	2500      	movs	r5, #0
    2328:	f104 0919 	add.w	r9, r4, #25
    232c:	68e3      	ldr	r3, [r4, #12]
    232e:	9a03      	ldr	r2, [sp, #12]
    2330:	1a9b      	subs	r3, r3, r2
    2332:	429d      	cmp	r5, r3
    2334:	db05      	blt.n	2342 <_printf_i+0x216>
    2336:	68e0      	ldr	r0, [r4, #12]
    2338:	9b03      	ldr	r3, [sp, #12]
    233a:	4298      	cmp	r0, r3
    233c:	bfb8      	it	lt
    233e:	4618      	movlt	r0, r3
    2340:	e793      	b.n	226a <_printf_i+0x13e>
    2342:	2301      	movs	r3, #1
    2344:	464a      	mov	r2, r9
    2346:	4639      	mov	r1, r7
    2348:	4630      	mov	r0, r6
    234a:	47c0      	blx	r8
    234c:	3001      	adds	r0, #1
    234e:	d08a      	beq.n	2266 <_printf_i+0x13a>
    2350:	3501      	adds	r5, #1
    2352:	e7eb      	b.n	232c <_printf_i+0x200>
    2354:	2b00      	cmp	r3, #0
    2356:	d1a7      	bne.n	22a8 <_printf_i+0x17c>
    2358:	780b      	ldrb	r3, [r1, #0]
    235a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    235e:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2362:	e765      	b.n	2230 <_printf_i+0x104>
    2364:	000029ba 	.word	0x000029ba
    2368:	000029a9 	.word	0x000029a9

0000236c <_sbrk_r>:
    236c:	b538      	push	{r3, r4, r5, lr}
    236e:	4c06      	ldr	r4, [pc, #24]	; (2388 <_sbrk_r+0x1c>)
    2370:	2300      	movs	r3, #0
    2372:	4605      	mov	r5, r0
    2374:	4608      	mov	r0, r1
    2376:	6023      	str	r3, [r4, #0]
    2378:	f7fe fafc 	bl	974 <_sbrk>
    237c:	1c43      	adds	r3, r0, #1
    237e:	d102      	bne.n	2386 <_sbrk_r+0x1a>
    2380:	6823      	ldr	r3, [r4, #0]
    2382:	b103      	cbz	r3, 2386 <_sbrk_r+0x1a>
    2384:	602b      	str	r3, [r5, #0]
    2386:	bd38      	pop	{r3, r4, r5, pc}
    2388:	20000684 	.word	0x20000684

0000238c <__sread>:
    238c:	b510      	push	{r4, lr}
    238e:	460c      	mov	r4, r1
    2390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2394:	f000 f8e6 	bl	2564 <_read_r>
    2398:	2800      	cmp	r0, #0
    239a:	bfab      	itete	ge
    239c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    239e:	89a3      	ldrhlt	r3, [r4, #12]
    23a0:	181b      	addge	r3, r3, r0
    23a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    23a6:	bfac      	ite	ge
    23a8:	6563      	strge	r3, [r4, #84]	; 0x54
    23aa:	81a3      	strhlt	r3, [r4, #12]
    23ac:	bd10      	pop	{r4, pc}

000023ae <__swrite>:
    23ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23b2:	461f      	mov	r7, r3
    23b4:	898b      	ldrh	r3, [r1, #12]
    23b6:	05db      	lsls	r3, r3, #23
    23b8:	4605      	mov	r5, r0
    23ba:	460c      	mov	r4, r1
    23bc:	4616      	mov	r6, r2
    23be:	d505      	bpl.n	23cc <__swrite+0x1e>
    23c0:	2302      	movs	r3, #2
    23c2:	2200      	movs	r2, #0
    23c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    23c8:	f000 f868 	bl	249c <_lseek_r>
    23cc:	89a3      	ldrh	r3, [r4, #12]
    23ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    23d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    23d6:	81a3      	strh	r3, [r4, #12]
    23d8:	4632      	mov	r2, r6
    23da:	463b      	mov	r3, r7
    23dc:	4628      	mov	r0, r5
    23de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    23e2:	f000 b817 	b.w	2414 <_write_r>

000023e6 <__sseek>:
    23e6:	b510      	push	{r4, lr}
    23e8:	460c      	mov	r4, r1
    23ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    23ee:	f000 f855 	bl	249c <_lseek_r>
    23f2:	1c43      	adds	r3, r0, #1
    23f4:	89a3      	ldrh	r3, [r4, #12]
    23f6:	bf15      	itete	ne
    23f8:	6560      	strne	r0, [r4, #84]	; 0x54
    23fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    23fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    2402:	81a3      	strheq	r3, [r4, #12]
    2404:	bf18      	it	ne
    2406:	81a3      	strhne	r3, [r4, #12]
    2408:	bd10      	pop	{r4, pc}

0000240a <__sclose>:
    240a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    240e:	f000 b813 	b.w	2438 <_close_r>
	...

00002414 <_write_r>:
    2414:	b538      	push	{r3, r4, r5, lr}
    2416:	4c07      	ldr	r4, [pc, #28]	; (2434 <_write_r+0x20>)
    2418:	4605      	mov	r5, r0
    241a:	4608      	mov	r0, r1
    241c:	4611      	mov	r1, r2
    241e:	2200      	movs	r2, #0
    2420:	6022      	str	r2, [r4, #0]
    2422:	461a      	mov	r2, r3
    2424:	f7fe ffc0 	bl	13a8 <_write>
    2428:	1c43      	adds	r3, r0, #1
    242a:	d102      	bne.n	2432 <_write_r+0x1e>
    242c:	6823      	ldr	r3, [r4, #0]
    242e:	b103      	cbz	r3, 2432 <_write_r+0x1e>
    2430:	602b      	str	r3, [r5, #0]
    2432:	bd38      	pop	{r3, r4, r5, pc}
    2434:	20000684 	.word	0x20000684

00002438 <_close_r>:
    2438:	b538      	push	{r3, r4, r5, lr}
    243a:	4c06      	ldr	r4, [pc, #24]	; (2454 <_close_r+0x1c>)
    243c:	2300      	movs	r3, #0
    243e:	4605      	mov	r5, r0
    2440:	4608      	mov	r0, r1
    2442:	6023      	str	r3, [r4, #0]
    2444:	f7fe faa8 	bl	998 <_close>
    2448:	1c43      	adds	r3, r0, #1
    244a:	d102      	bne.n	2452 <_close_r+0x1a>
    244c:	6823      	ldr	r3, [r4, #0]
    244e:	b103      	cbz	r3, 2452 <_close_r+0x1a>
    2450:	602b      	str	r3, [r5, #0]
    2452:	bd38      	pop	{r3, r4, r5, pc}
    2454:	20000684 	.word	0x20000684

00002458 <_fstat_r>:
    2458:	b538      	push	{r3, r4, r5, lr}
    245a:	4c07      	ldr	r4, [pc, #28]	; (2478 <_fstat_r+0x20>)
    245c:	2300      	movs	r3, #0
    245e:	4605      	mov	r5, r0
    2460:	4608      	mov	r0, r1
    2462:	4611      	mov	r1, r2
    2464:	6023      	str	r3, [r4, #0]
    2466:	f7fe fa9a 	bl	99e <_fstat>
    246a:	1c43      	adds	r3, r0, #1
    246c:	d102      	bne.n	2474 <_fstat_r+0x1c>
    246e:	6823      	ldr	r3, [r4, #0]
    2470:	b103      	cbz	r3, 2474 <_fstat_r+0x1c>
    2472:	602b      	str	r3, [r5, #0]
    2474:	bd38      	pop	{r3, r4, r5, pc}
    2476:	bf00      	nop
    2478:	20000684 	.word	0x20000684

0000247c <_isatty_r>:
    247c:	b538      	push	{r3, r4, r5, lr}
    247e:	4c06      	ldr	r4, [pc, #24]	; (2498 <_isatty_r+0x1c>)
    2480:	2300      	movs	r3, #0
    2482:	4605      	mov	r5, r0
    2484:	4608      	mov	r0, r1
    2486:	6023      	str	r3, [r4, #0]
    2488:	f7fe fa8e 	bl	9a8 <_isatty>
    248c:	1c43      	adds	r3, r0, #1
    248e:	d102      	bne.n	2496 <_isatty_r+0x1a>
    2490:	6823      	ldr	r3, [r4, #0]
    2492:	b103      	cbz	r3, 2496 <_isatty_r+0x1a>
    2494:	602b      	str	r3, [r5, #0]
    2496:	bd38      	pop	{r3, r4, r5, pc}
    2498:	20000684 	.word	0x20000684

0000249c <_lseek_r>:
    249c:	b538      	push	{r3, r4, r5, lr}
    249e:	4c07      	ldr	r4, [pc, #28]	; (24bc <_lseek_r+0x20>)
    24a0:	4605      	mov	r5, r0
    24a2:	4608      	mov	r0, r1
    24a4:	4611      	mov	r1, r2
    24a6:	2200      	movs	r2, #0
    24a8:	6022      	str	r2, [r4, #0]
    24aa:	461a      	mov	r2, r3
    24ac:	f7fe fa7e 	bl	9ac <_lseek>
    24b0:	1c43      	adds	r3, r0, #1
    24b2:	d102      	bne.n	24ba <_lseek_r+0x1e>
    24b4:	6823      	ldr	r3, [r4, #0]
    24b6:	b103      	cbz	r3, 24ba <_lseek_r+0x1e>
    24b8:	602b      	str	r3, [r5, #0]
    24ba:	bd38      	pop	{r3, r4, r5, pc}
    24bc:	20000684 	.word	0x20000684

000024c0 <memchr>:
    24c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    24c4:	2a10      	cmp	r2, #16
    24c6:	db2b      	blt.n	2520 <memchr+0x60>
    24c8:	f010 0f07 	tst.w	r0, #7
    24cc:	d008      	beq.n	24e0 <memchr+0x20>
    24ce:	f810 3b01 	ldrb.w	r3, [r0], #1
    24d2:	3a01      	subs	r2, #1
    24d4:	428b      	cmp	r3, r1
    24d6:	d02d      	beq.n	2534 <memchr+0x74>
    24d8:	f010 0f07 	tst.w	r0, #7
    24dc:	b342      	cbz	r2, 2530 <memchr+0x70>
    24de:	d1f6      	bne.n	24ce <memchr+0xe>
    24e0:	b4f0      	push	{r4, r5, r6, r7}
    24e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    24e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    24ea:	f022 0407 	bic.w	r4, r2, #7
    24ee:	f07f 0700 	mvns.w	r7, #0
    24f2:	2300      	movs	r3, #0
    24f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    24f8:	3c08      	subs	r4, #8
    24fa:	ea85 0501 	eor.w	r5, r5, r1
    24fe:	ea86 0601 	eor.w	r6, r6, r1
    2502:	fa85 f547 	uadd8	r5, r5, r7
    2506:	faa3 f587 	sel	r5, r3, r7
    250a:	fa86 f647 	uadd8	r6, r6, r7
    250e:	faa5 f687 	sel	r6, r5, r7
    2512:	b98e      	cbnz	r6, 2538 <memchr+0x78>
    2514:	d1ee      	bne.n	24f4 <memchr+0x34>
    2516:	bcf0      	pop	{r4, r5, r6, r7}
    2518:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    251c:	f002 0207 	and.w	r2, r2, #7
    2520:	b132      	cbz	r2, 2530 <memchr+0x70>
    2522:	f810 3b01 	ldrb.w	r3, [r0], #1
    2526:	3a01      	subs	r2, #1
    2528:	ea83 0301 	eor.w	r3, r3, r1
    252c:	b113      	cbz	r3, 2534 <memchr+0x74>
    252e:	d1f8      	bne.n	2522 <memchr+0x62>
    2530:	2000      	movs	r0, #0
    2532:	4770      	bx	lr
    2534:	3801      	subs	r0, #1
    2536:	4770      	bx	lr
    2538:	2d00      	cmp	r5, #0
    253a:	bf06      	itte	eq
    253c:	4635      	moveq	r5, r6
    253e:	3803      	subeq	r0, #3
    2540:	3807      	subne	r0, #7
    2542:	f015 0f01 	tst.w	r5, #1
    2546:	d107      	bne.n	2558 <memchr+0x98>
    2548:	3001      	adds	r0, #1
    254a:	f415 7f80 	tst.w	r5, #256	; 0x100
    254e:	bf02      	ittt	eq
    2550:	3001      	addeq	r0, #1
    2552:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    2556:	3001      	addeq	r0, #1
    2558:	bcf0      	pop	{r4, r5, r6, r7}
    255a:	3801      	subs	r0, #1
    255c:	4770      	bx	lr
    255e:	bf00      	nop

00002560 <__malloc_lock>:
    2560:	4770      	bx	lr

00002562 <__malloc_unlock>:
    2562:	4770      	bx	lr

00002564 <_read_r>:
    2564:	b538      	push	{r3, r4, r5, lr}
    2566:	4c07      	ldr	r4, [pc, #28]	; (2584 <_read_r+0x20>)
    2568:	4605      	mov	r5, r0
    256a:	4608      	mov	r0, r1
    256c:	4611      	mov	r1, r2
    256e:	2200      	movs	r2, #0
    2570:	6022      	str	r2, [r4, #0]
    2572:	461a      	mov	r2, r3
    2574:	f7fe ff08 	bl	1388 <_read>
    2578:	1c43      	adds	r3, r0, #1
    257a:	d102      	bne.n	2582 <_read_r+0x1e>
    257c:	6823      	ldr	r3, [r4, #0]
    257e:	b103      	cbz	r3, 2582 <_read_r+0x1e>
    2580:	602b      	str	r3, [r5, #0]
    2582:	bd38      	pop	{r3, r4, r5, pc}
    2584:	20000684 	.word	0x20000684
    2588:	682f2e2e 	.word	0x682f2e2e
    258c:	732f6c61 	.word	0x732f6c61
    2590:	682f6372 	.word	0x682f6372
    2594:	615f6c61 	.word	0x615f6c61
    2598:	735f6364 	.word	0x735f6364
    259c:	2e636e79 	.word	0x2e636e79
    25a0:	00000063 	.word	0x00000063
    25a4:	682f2e2e 	.word	0x682f2e2e
    25a8:	732f6c61 	.word	0x732f6c61
    25ac:	682f6372 	.word	0x682f6372
    25b0:	695f6c61 	.word	0x695f6c61
    25b4:	00632e6f 	.word	0x00632e6f
    25b8:	682f2e2e 	.word	0x682f2e2e
    25bc:	732f6c61 	.word	0x732f6c61
    25c0:	682f6372 	.word	0x682f6372
    25c4:	745f6c61 	.word	0x745f6c61
    25c8:	72656d69 	.word	0x72656d69
    25cc:	0000632e 	.word	0x0000632e
    25d0:	682f2e2e 	.word	0x682f2e2e
    25d4:	732f6c61 	.word	0x732f6c61
    25d8:	682f6372 	.word	0x682f6372
    25dc:	755f6c61 	.word	0x755f6c61
    25e0:	74726173 	.word	0x74726173
    25e4:	6e79735f 	.word	0x6e79735f
    25e8:	00632e63 	.word	0x00632e63
    25ec:	682f2e2e 	.word	0x682f2e2e
    25f0:	752f6c61 	.word	0x752f6c61
    25f4:	736c6974 	.word	0x736c6974
    25f8:	6372732f 	.word	0x6372732f
    25fc:	6974752f 	.word	0x6974752f
    2600:	6c5f736c 	.word	0x6c5f736c
    2604:	2e747369 	.word	0x2e747369
    2608:	00000063 	.word	0x00000063

0000260c <_adcs>:
    260c:	04400001 12030018 00001806 00000000     ..@.............
	...
    2624:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    2634:	632e6364 00000000                       dc.c....

0000263c <_cfgs>:
    263c:	00204740 16080000 00204640 09080000     @G .....@F .....
	...

0000273c <user_mux_confs>:
	...
    2774:	00000100 00000000 00000000              ............

00002780 <channel_confs>:
    2780:	0000420c 00000000 00000000 00000000     .B..............
	...

000027c0 <interrupt_cfg>:
	...
    2840:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    2850:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    2860:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    2870:	43000800 43000c00                       ...C...C

00002878 <_i2cms>:
	...
    2890:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    28a0:	65735f6c 6d6f6372 0000632e 41200a0d     l_sercom.c.... A
    28b0:	44204344 5320414d 65757165 6e69636e     DC DMA Sequencin
    28c0:	78652067 6c706d61 000d2065 41200a0d     g example .... A
    28d0:	63204344 65766e6f 6f697372 666f206e     DC conversion of
    28e0:	69203420 7475706e 6f642073 0d20656e      4 inputs done .
    28f0:	00000000 354e4941 3025203a 0a0d6434     ....AIN5: %04d..
    2900:	00000000 364e4941 3025203a 0a0d6434     ....AIN6: %04d..
    2910:	00000000 374e4941 3025203a 0a0d6434     ....AIN7: %04d..
    2920:	00000000 384e4941 3025203a 0a0d6434     ....AIN8: %04d..
    2930:	00000000                                ....

00002934 <_global_impure_ptr>:
    2934:	20000014                                ... 

00002938 <__sf_fake_stderr>:
	...

00002958 <__sf_fake_stdin>:
	...

00002978 <__sf_fake_stdout>:
	...
    2998:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    29a8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    29b8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    29c8:	00006665                                ef..

000029cc <_init>:
    29cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ce:	bf00      	nop
    29d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    29d2:	bc08      	pop	{r3}
    29d4:	469e      	mov	lr, r3
    29d6:	4770      	bx	lr

000029d8 <__init_array_start>:
    29d8:	00000289 	.word	0x00000289

000029dc <_fini>:
    29dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29de:	bf00      	nop
    29e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    29e2:	bc08      	pop	{r3}
    29e4:	469e      	mov	lr, r3
    29e6:	4770      	bx	lr

000029e8 <__fini_array_start>:
    29e8:	00000265 	.word	0x00000265
